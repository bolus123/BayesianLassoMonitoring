}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 1,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
out <- rep(NA, 6 * 14 + 2)
out1 <- try(getChart(Y1,  H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset1), silent = TRUE)
if (class(out1)[1] == "try-error") {
out1 <- rep(NA, 14)
}
out2 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset2), silent = TRUE)
if (class(out2)[1] == "try-error") {
out2 <- rep(NA, 14)
}
out3 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset3), silent = TRUE)
if (class(out3)[1] == "try-error") {
out3 <- rep(NA, 14)
}
out4 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset4), silent = TRUE)
if (class(out4)[1] == "try-error") {
out4 <- rep(NA, 14)
}
out5 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset5), silent = TRUE)
if (class(out5)[1] == "try-error") {
out5 <- rep(NA, 14)
}
out6 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset6), silent = TRUE)
if (class(out6)[1] == "try-error") {
out6 <- rep(NA, 14)
}
out <- c(out1, out2, out3, out4, out5, out6)
cat("Gibbs Done at X:", X, "\n")
tmp <- try(forecast::auto.arima(Y1), silent = TRUE)
if (class(tmp)[1] != "try-error") {
ph1 <- tmp$fitted
ph1[which(ph1 < 0)] <- 0
RMSE.ph1.arima <- sqrt(mean(((Y1 - ph1)^2)))
ph2 <- forecast::forecast(tmp, h = length(Y2))$mean
ph2[which(ph2 < 0)] <- 0
RMSE.ph2.arima <- sqrt(mean((Y2 - ph2) ^ 2))
}
out <- c(out, RMSE.ph1.arima, RMSE.ph2.arima)
#tmpaddr <- paste('C:/Users/yyao17/Box/2023 Summer/BayesianMonitoring/untitled folder/tmp1/sim', X, ".Rdat", sep = "")
#save(out, file = tmpaddr)
cat("end at X:", X, "\n")
return(out)
}
wrap <- function(X, pars, alpha, lambda, pi, seed = 12345) {
out <- try(simulation.wrap(X, pars, alpha, lambda, pi, seed), silent = TRUE)
return(out)
}
library(parallel)
seed <- 12345
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 100
TT1 <- c(92, 183)
#TT1 <- c(92)
TT2 <- 365
w <- c(1, 3, 7)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
pars <- pars[1:3, ]
tt <- dim(pars)[1]
#cl <- makeCluster(min(tt, ceiling(detectCores() * 0.875)), outfile = "C:/Users/yyao17/Box/2023 Summer/BayesianMonitoring/untitled folder/tmp1/sim.log")
cl <- makeCluster(min(tt, ceiling(detectCores() * 0.875)))
clusterEvalQ(cl, library(BayesianLASSOMonitoring))
clusterEvalQ(cl, library(forecast))
clusterExport(cl, c("wrap", "simulation.wrap", "getChart"))
out <- parLapplyLB(cl, 1:tt, wrap, pars = pars, alpha = alpha, lambda = lambda, pi = pi, seed = seed)
#out <- parLapplyLB(cl, 1:4, wrap, pars = pars, alpha = alpha, lambda = lambda, pi = pi, seed = seed)
#out <- lapply(1:2, wrap, pars = pars, alpha = alpha, lambda = lambda, pi = pi, seed = seed)
#save(out, file = "C:/Users/yyao17/Box/2023 Summer/BayesianMonitoring/untitled folder/tmp1/out.Rdat")
closeAllConnections()
out
X <- 5
seed <- 12345
load(file = '/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat')
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1, 3, 7, 14)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
tt <- dim(pars)[1]
X
getChart <- function(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset) {
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X = X1, H = H1), silent = TRUE)
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding,
nsim = 100000), silent = TRUE)
chart3 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.YJSum(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 100000), silent = TRUE)
chart4 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.YJMax(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 100000), silent = TRUE)
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu1 <- tmpMu1 + X1 %*% (chart1$Beta * chart1$Zeta)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- tmpMu2 + X2 %*% (chart1$Beta* chart1$Zeta)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps, 1)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
ph1pestmedian <- rep(NA, length(Y1) - bset$q)
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1)  - bset$q)) {
ph1pestmedian[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pestmedian <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pestmedian[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 14)
if ((class(chart1)[1] != "try-error") & (class(chart2)[1] != "try-error")) {
q <- dim(chart1$Phi)[1]
RMSE.ph1.median <- sqrt(mean((Y1[-c(1:q)] - ph1pestmedian) ^ 2, na.rm = TRUE))
RMSE.ph2.median <- sqrt(mean((Y2 - ph2pestmedian) ^ 2, na.rm = TRUE))
out <- c(RMSE.ph1.median,
RMSE.ph2.median)
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
###############################################
#chart 2
###############################################
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
###############################################
#chart 3
###############################################
TP.app <- sum(chart3$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart3$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart3$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart3$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart3$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
###############################################
#chart 4
###############################################
TP.app <- sum(chart4$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart4$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart4$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart4$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart4$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
###############################################
}
return(out)
}
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
out <-  rep(NA, 6 * 14)
out1 <- getChart(Y1,  H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset1)
out1
bset<-bset1
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X = X1, H = H1), silent = TRUE)
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding,
nsim = 100000), silent = TRUE)
chart3 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.YJSum(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 100000), silent = TRUE)
chart4 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.YJMax(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 100000), silent = TRUE)
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
chart2
chart2$grandsig
chart3$
grandisg
chart
chart3
chart4
Rcpp::compileAttributes()
roxygen2::roxygenize()
BayesianLASSOMonitoring::Ph1MultipleTesting.YJMax
X
chart3 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.YJSum(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 100000), silent = TRUE)
chart4 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.YJMax(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 100000), silent = TRUE)
chart3
chart4
chart3$grandsig
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu1 <- tmpMu1 + X1 %*% (chart1$Beta * chart1$Zeta)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- tmpMu2 + X2 %*% (chart1$Beta* chart1$Zeta)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps, 1)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
ph1pestmedian <- rep(NA, length(Y1) - bset$q)
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1)  - bset$q)) {
ph1pestmedian[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pestmedian <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pestmedian[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 14)
if ((class(chart1)[1] != "try-error") & (class(chart2)[1] != "try-error")) {
q <- dim(chart1$Phi)[1]
RMSE.ph1.median <- sqrt(mean((Y1[-c(1:q)] - ph1pestmedian) ^ 2, na.rm = TRUE))
RMSE.ph2.median <- sqrt(mean((Y2 - ph2pestmedian) ^ 2, na.rm = TRUE))
out <- c(RMSE.ph1.median,
RMSE.ph2.median)
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
###############################################
#chart 2
###############################################
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
###############################################
#chart 3
###############################################
TP.app <- sum(chart3$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart3$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart3$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart3$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart3$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
###############################################
#chart 4
###############################################
TP.app <- sum(chart4$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart4$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart4$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart4$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart4$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
###############################################
}
out
seed <- 12345
load(file = '/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_METHADONE_model2.Rdat')
object <- walker_METHADONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1, 3, 7, 14)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X = X1, H = H1), silent = TRUE)
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding,
nsim = 100000), silent = TRUE)
chart3 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.YJSum(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 100000), silent = TRUE)
chart4 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.YJMax(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 100000), silent = TRUE)
chart3
chart3$grandsig
chart3$sig
chart4$grandsig
chart4$sig
chart2$grandsig
chart2$sig
X
pars[X, ]
pars
pars[1:10, ]
