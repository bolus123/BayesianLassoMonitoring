ff1$grandsig
ff2$grandsig
chart2$grandsig
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding,
nsim = 10000, backtr = 1), silent = TRUE)
chart2
chart2$grandsig
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000)
debug(Ph1MultipleTesting.Y01Ma)
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000)
dd
dd[, 1]
dd[, 1]
Ph1MultipleTesting.Y01Ma <- function(model, w = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0) {
root.finding <- function(adj.alpha, ph1mat, FAP0, n, nsim, side = "right-sided", verbose = 0) {
lim <- matrix(NA, nrow = n, ncol = 2)
sig <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:n) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
for (i in 1:nsim) {
sig[, i] <- (lim[, 1] <= ph1mat[, i]) & (ph1mat[, i] <= lim[, 2])
}
tmp <- mean(colSums(sig) == n, na.rm = TRUE)
dif <- tmp - (1 - FAP0)
if (verbose == 1) {
cat("adj.alpha:", adj.alpha, "\n")
cat("FAP0:", 1 - tmp, "\n")
}
return(dif)
}
q <- dim(model$Phi)[1]
n <- length(model$Y)
nnsim <- dim(model$Phi)[2]
ph1mat <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
Mu0 <- matrix(rep(model$mu0[tmpsel], n))
if (!is.null(model$X)) {
Mu0 <- Mu0 + model$X %*% (model$Beta[, tmpsel] * model$Zeta[, tmpsel])
}
ph1mat[, i] <- simYph2(0, as.matrix(model$Y), as.matrix(model$Z[, tmpsel]), as.matrix(model$Phi[, tmpsel]),
Mu0, model$sigma2[tmpsel], updateYJ, model$theta[tmpsel],
leftcensoring, rounding, eps, backtr)
}
dd <- movaver(ph1mat, w)
if (w > 1) {
dd <- dd[-c(1:(w - 1)), ]
}
##debug(root.finding)
adj.alpha <- uniroot(root.finding, interval, ph1mat = dd, FAP0 = FAP0, n = n - q - (w - 1), nsim = nsim, side = side,
tol = 1e-6, verbose = verbose)$root
lim <- matrix(NA, nrow = n - q - (w - 1), ncol = 2)
sig <- matrix(NA, nrow = n - q - (w - 1), ncol = 1)
lim[, 1] <- -Inf
lim[, 2] <- Inf
for (i in 1:(n - q - (w - 1))) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
cs <- movaver(model$Y, w)
cs <- cs[-c(1:(q + w - 1))]
sig <- 1 - ((lim[, 1] <= cs) & (cs <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cs, "sig" = sig, "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000)
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000)
debug(Ph1MultipleTesting.Y01Ma)
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000)
dim(dd)
Q
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000, verbose = 1)
cs
sig
length(sig)
rep(0, 0)
Ph1MultipleTesting.Y01Ma <- function(model, w = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0) {
root.finding <- function(adj.alpha, ph1mat, FAP0, n, nsim, side = "right-sided", verbose = 0) {
lim <- matrix(NA, nrow = n, ncol = 2)
sig <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:n) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
for (i in 1:nsim) {
sig[, i] <- (lim[, 1] <= ph1mat[, i]) & (ph1mat[, i] <= lim[, 2])
}
tmp <- mean(colSums(sig) == n, na.rm = TRUE)
dif <- tmp - (1 - FAP0)
if (verbose == 1) {
cat("adj.alpha:", adj.alpha, "\n")
cat("FAP0:", 1 - tmp, "\n")
}
return(dif)
}
q <- dim(model$Phi)[1]
n <- length(model$Y)
nnsim <- dim(model$Phi)[2]
ph1mat <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
Mu0 <- matrix(rep(model$mu0[tmpsel], n))
if (!is.null(model$X)) {
Mu0 <- Mu0 + model$X %*% (model$Beta[, tmpsel] * model$Zeta[, tmpsel])
}
ph1mat[, i] <- simYph2(0, as.matrix(model$Y), as.matrix(model$Z[, tmpsel]), as.matrix(model$Phi[, tmpsel]),
Mu0, model$sigma2[tmpsel], updateYJ, model$theta[tmpsel],
leftcensoring, rounding, eps, backtr)
}
dd <- movaver(ph1mat, w)
if (w > 1) {
dd <- dd[-c(1:(w - 1)), ]
}
##debug(root.finding)
adj.alpha <- uniroot(root.finding, interval, ph1mat = dd, FAP0 = FAP0, n = n - q - (w - 1), nsim = nsim, side = side,
tol = 1e-6, verbose = verbose)$root
lim <- matrix(NA, nrow = n - q - (w - 1), ncol = 2)
sig <- matrix(NA, nrow = n - q - (w - 1), ncol = 1)
lim[, 1] <- -Inf
lim[, 2] <- Inf
for (i in 1:(n - q - (w - 1))) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
cs <- movaver(model$Y, w)
cs <- cs[-c(1:(q + w - 1))]
sig <- 1 - ((lim[, 1] <= cs) & (cs <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cs, "sig" = c(rep(0, w - 1), sig), "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000, verbose = 1)
ff1
ff1$grandsig
ff1$cs
ff1$sig
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 7, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000, verbose = 1)
ff2$grandsig
ff2$cs
ff2$sig
length(ff2$sig)
Ph1MultipleTesting.Y01Ma <- function(model, w = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0) {
root.finding <- function(adj.alpha, ph1mat, FAP0, n, nsim, side = "right-sided", verbose = 0) {
lim <- matrix(NA, nrow = n, ncol = 2)
sig <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:n) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
for (i in 1:nsim) {
sig[, i] <- (lim[, 1] <= ph1mat[, i]) & (ph1mat[, i] <= lim[, 2])
}
tmp <- mean(colSums(sig) == n, na.rm = TRUE)
dif <- tmp - (1 - FAP0)
if (verbose == 1) {
cat("adj.alpha:", adj.alpha, "\n")
cat("FAP0:", 1 - tmp, "\n")
}
return(dif)
}
q <- dim(model$Phi)[1]
n <- length(model$Y)
nnsim <- dim(model$Phi)[2]
ph1mat <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
Mu0 <- matrix(rep(model$mu0[tmpsel], n))
if (!is.null(model$X)) {
Mu0 <- Mu0 + model$X %*% (model$Beta[, tmpsel] * model$Zeta[, tmpsel])
}
ph1mat[, i] <- simYph2(0, as.matrix(model$Y), as.matrix(model$Z[, tmpsel]), as.matrix(model$Phi[, tmpsel]),
Mu0, model$sigma2[tmpsel], updateYJ, model$theta[tmpsel],
leftcensoring, rounding, eps, backtr)
}
dd <- movaver(ph1mat, w)
if (w > 1) {
dd <- dd[-c(1:(w - 1)), ]
}
##debug(root.finding)
adj.alpha <- uniroot(root.finding, interval, ph1mat = dd, FAP0 = FAP0, n = n - q - (w - 1), nsim = nsim, side = side,
tol = 1e-6, verbose = verbose)$root
lim <- matrix(NA, nrow = n - q - (w - 1), ncol = 2)
sig <- matrix(NA, nrow = n - q - (w - 1), ncol = 1)
lim[, 1] <- -Inf
lim[, 2] <- Inf
for (i in 1:(n - q - (w - 1))) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
cs <- movaver(model$Y, w)
cs <- cs[-c(1:(q + w - 1))]
sig <- 1 - ((lim[, 1] <= cs) & (cs <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cs, "sig" = c(rep(0, w - 1), sig), "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 7, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000, verbose = 1)
ff1$sig
length(ff1$sig)
ff1 <- Ph1MultipleTesting.Y01Ma(chart1, w = 14, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000, verbose = 1)
ff1$sig
ff1$cs
plot(ff1$cs)
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000), silent = TRUE)
chart3 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01Ma(chart1, w = 7, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000), silent = TRUE)
chart4 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01Ma(chart1, w = 14, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000), silent = TRUE)
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps, 1)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
ph1pestmedian <- rep(NA, length(Y1) - bset$q)
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1)  - bset$q)) {
ph1pestmedian[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pestmedian <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pestmedian[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 14)
if (class(chart1)[1] != "try-error") {
q <- dim(chart1$Phi)[1]
RMSE.ph1.median <- sqrt(mean((Y1[-c(1:q)] - ph1pestmedian) ^ 2, na.rm = TRUE))
RMSE.ph2.median <- sqrt(mean((Y2 - ph2pestmedian) ^ 2, na.rm = TRUE))
out <- c(RMSE.ph1.median,
RMSE.ph2.median)
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
###############################################
#chart 2
###############################################
if (class(chart2)[1] != "try-error"){
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
} else {
out <- c(out, rep(NA, 4))
}
###############################################
#chart 3
###############################################
if (class(chart3)[1] != "try-error"){
TP.app <- sum(chart3$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart3$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart3$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart3$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart3$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
} else {
out <- c(out, rep(NA, 4))
}
###############################################
#chart 4
###############################################
if (class(chart4)[1] != "try-error"){
TP.app <- sum(chart4$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart4$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart4$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart4$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart4$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
} else {
out <- c(out, rep(NA, 4))
}
###############################################
}
out
ph1pestmedian
ph2pestmedian
chart2
chart2 <- Ph1MultipleTesting.Y01Ma(chart1, w = 1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000)
chart3 <- Ph1MultipleTesting.Y01Ma(chart1, w = 7, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000)
chart4 <- Ph1MultipleTesting.Y01Ma(chart1, w = 14, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
backtr = 1, nsim = 10000)
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps, 1)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
ph1pestmedian <- rep(NA, length(Y1) - bset$q)
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1)  - bset$q)) {
ph1pestmedian[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pestmedian <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pestmedian[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 14)
if (class(chart1)[1] != "try-error") {
q <- dim(chart1$Phi)[1]
RMSE.ph1.median <- sqrt(mean((Y1[-c(1:q)] - ph1pestmedian) ^ 2, na.rm = TRUE))
RMSE.ph2.median <- sqrt(mean((Y2 - ph2pestmedian) ^ 2, na.rm = TRUE))
out <- c(RMSE.ph1.median,
RMSE.ph2.median)
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
###############################################
#chart 2
###############################################
if (class(chart2)[1] != "try-error"){
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
} else {
out <- c(out, rep(NA, 4))
}
###############################################
#chart 3
###############################################
if (class(chart3)[1] != "try-error"){
TP.app <- sum(chart3$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart3$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart3$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart3$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart3$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
} else {
out <- c(out, rep(NA, 4))
}
###############################################
#chart 4
###############################################
if (class(chart4)[1] != "try-error"){
TP.app <- sum(chart4$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart4$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart4$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart4$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart4$grandsig
out <- c(out, sig,
sensitivity.app,
specificity.app,
ppv.app)
} else {
out <- c(out, rep(NA, 4))
}
###############################################
}
out
