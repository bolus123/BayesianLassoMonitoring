10 - 1
diff
?diff
diff(c(0, 1, 0, 0))
diff(c(0, 1, 1, 1))
c(0, diff(c(0, 1, 1, 1)))
c(0, diff(c(0, 1, 0, 0)))
c(0, diff(c(0, 1, 1, 0)))
1 + w
1 + 7
1:8
devtools::install_github("bolus123/BayesianLASSOMonitoring", "with-transformation")
seed <- 12345
load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "ALASSO",
"mono" = 1,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
cc <- Ph1MultipleTesting.GammaBC(model, w = 7, FAP0 = 0.2, side = "right-sided")
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.2, side = "right-sided")
cc
cc$sig
plot(cc$sig)
tt
cc$grandsig
cc$sig
cc$pvalue
plot(cc$pvalue)
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
cc
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring", "with-transformation")
seed <- 12345
load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "ALASSO",
"mono" = 1,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
cc <- BayesianLASSOMonitoring::Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
Ph1MultipleTesting.GammaBC <- function(model, w = 7, FAP0 = 0.2, side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
cs <- rowMeans(TauGamma) / apply(TauGamma, 1, sd)
adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
sig <- pvalue <= adj.alpha
grand.sig <- sum(sig) > 0
}
tmpsig <- H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 1) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
debug(Ph1MultipleTesting.GammaBC)
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
debug(Ph1MultipleTesting.GammaBC)
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
sig
Ph1MultipleTesting.GammaBC <- function(model, w = 7, FAP0 = 0.2, side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
cs <- rowMeans(TauGamma) / apply(TauGamma, 1, sd)
adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
sig <- pvalue <= adj.alpha
grand.sig <- sum(sig) > 0
}
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 1) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
cc
cc$sig
length(cc$sig)
debug(Ph1MultipleTesting.GammaBC)
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
tmpsig
tmpsel
nsel
Ph1MultipleTesting.GammaBC <- function(model, w = 7, FAP0 = 0.2, side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
cs <- rowMeans(TauGamma) / apply(TauGamma, 1, sd)
adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
sig <- pvalue <= adj.alpha
grand.sig <- sum(sig) > 0
}
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
cc <- Ph1MultipleTesting.GammaBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
cc
which(cc$sig)
which(cc$sig == 1)
chart2 <- NULL
class(chart2) <- "try-error"
chart2 <- NA
class(chart2) <- "try-error"
class(chart2)
tt
183/2
92
bb
cc
plot(bb$Y)
plot(bb$Y, col = cc$sig)
col <- c("black", "red")
plot(bb$Y, col = col[cc$sig + 1])
plot(bb$Y, col = col[cc$sig + 1], type = 'l')
plot(bb$Y, col = col[cc$sig + 1], type = 'o')
load(file = "C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/untitled folder/tmp1/sim57.Rdat")
out
seed <- 12345
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 50
TT1 <- c(92, 183)
#TT1 <- c(92)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
cat("start at X:", X, "\n")
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 1,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
out <- rep(NA, 6 * 14 + 2)
out1 <- try(getChart(Y1,  H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset1, w), silent = TRUE)
if (class(out1)[1] == "try-error") {
out1 <- rep(NA, 14)
}
out2 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset2, w), silent = TRUE)
if (class(out2)[1] == "try-error") {
out2 <- rep(NA, 14)
}
out3 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset3, w), silent = TRUE)
if (class(out3)[1] == "try-error") {
out3 <- rep(NA, 14)
}
out4 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset4, w), silent = TRUE)
if (class(out4)[1] == "try-error") {
out4 <- rep(NA, 14)
}
out5 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset5, w), silent = TRUE)
if (class(out5)[1] == "try-error") {
out5 <- rep(NA, 14)
}
out6 <- try(getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset6, w), silent = TRUE)
if (class(out6)[1] == "try-error") {
out6 <- rep(NA, 14)
}
out <- c(out1, out2, out3, out4, out5, out6)
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, H = H1), silent = TRUE)
##chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01MH(chart1, w = 1, FAP0 = FAP0, side = side,
##                                 updateYJ = bset$updateYJ,
##                                 leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
##                                 backtr = 1, nsim = 10000), silent = TRUE)
##
##chart3 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01MH(chart1, w = 7, FAP0 = FAP0, side = side,
##                                 updateYJ = bset$updateYJ,
##                                 leftcensoring = bset$leftcensoring, rounding = bset$rounding, eps = bset$eps,
##                                 backtr = 1, nsim = 10000), silent = TRUE)
chart2 <- NA
class(chart2) <- "try-error"
chart3 <- NA
class(chart3) <- "try-error"
chart4 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.GammaBC(chart1, w = w, FAP0 = FAP0, side = side), silent = TRUE)
chart4
chart1$H
remove.packages("BayesianLASSOMonitoring")
