updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
debug(Ph1MultipleTesting.Y01MH)
debug(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01MH)
cc1 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01MH(bb, w = 1, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
rowvar1
w1
w2
ph1mat[(i - (w - 1)):i, ]
var(t(ph1mat[(i - (w - 1)):i, ]))
i - (w - 1)
i
debug(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01MH)
cc1 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01MH(bb, w = 1, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
ph1mat[(i - (w - 1)):i, ]
aa <- ph1mat[(i - (w - 1)):i, ]
aa
dim(aa)
length(aa)
var(aa)
as.matrix(ph1mat[(i - (w - 1)):i, ])
Ph1MultipleTesting.Y01MH <- function(model, w = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0) {
root.finding <- function(adj.alpha, ph1mat, FAP0, n, nsim, side = "right-sided", verbose = 0) {
lim <- matrix(NA, nrow = n, ncol = 2)
sig <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:n) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- Inf
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
for (i in 1:nsim) {
sig[, i] <- (lim[, 1] <= ph1mat[, i]) & (ph1mat[, i] <= lim[, 2])
}
tmp <- mean(colSums(sig) == n, na.rm = TRUE)
dif <- tmp - (1 - FAP0)
if (verbose == 1) {
cat("adj.alpha:", adj.alpha, "\n")
cat("FAP0:", 1 - tmp, "\n")
}
return(dif)
}
q <- dim(model$Phi)[1]
n <- length(model$Y)
nnsim <- dim(model$Phi)[2]
ph1mat <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
Mu0 <- matrix(rep(model$mu0[tmpsel], n))
if (!is.null(model$X)) {
Mu0 <- Mu0 + model$X %*% (model$Beta[, tmpsel] * model$Zeta[, tmpsel])
}
ph1mat[, i] <- simYph2NoY(n - q, as.matrix(model$Y), as.matrix(model$Z[, tmpsel]), as.matrix(model$Phi[, tmpsel]),
Mu0, model$sigma2[tmpsel], updateYJ, model$theta[tmpsel],
leftcensoring, rounding, eps, backtr)
#ph1mat[, i] <- rank(ph1mat[, i])
}
##w <- 1 + hw * 2
#mm <- rowMeans(ph1mat, na.rm = TRUE)
mm <- apply(ph1mat, 1, median, na.rm = TRUE)
dd <- ph1mat - mm
#if (side == "left-sided") {
#  dd[dd > 0] <- 0
#} else if (side == "right-sided") {
#  dd[dd < 0] <- 0
#}
#dd <- abs(dd)
w1 <- floor(w / 2)
w2 <- w - w1
rowvar <- array(NA, dim = c(w, w, n - q))
rowvar1 <- array(NA, dim = c(w1, w1, n - q))
rowvar2 <- array(NA, dim = c(w2, w2, n - q))
ee <- matrix(NA, nrow = n - q, ncol = nsim)
ee1 <- matrix(NA, nrow = n - q, ncol = nsim)
ee2 <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in w:(n - q)) {
if (w > 1) {
rowvar[, , i] <- var(t(ph1mat[(i - (w - 1)):i, ]))
rowvar[, , i] <- solve(rowvar[, , i])
rowvar1[, , i] <- var(t(ph1mat[(i - (w - 1)):(i - (w - 1) + w1 - 1), ]))
rowvar1[, , i] <- solve(rowvar1[, , i])
rowvar2[, , i] <- var(t(ph1mat[(i - (w - 1) + w1):i, ]))
rowvar2[, , i] <- solve(rowvar2[, , i])
} else {
rowvar[, , i] <- var(ph1mat[(i - (w - 1)):i, ])
rowvar[, , i] <- 1 / rowvar[, , i]
}
for (j in 1:nsim) {
ee[i, j] <- t(dd[(i - (w - 1)):i, j]) %*% rowvar[, , i] %*% dd[(i - (w - 1)):i, j]
if (w > 1) {
ee[i, j] <- ee[i, j] -
t(dd[(i - (w - 1)):(i - (w - 1) + w1 - 1), j]) %*% rowvar1[, , i] %*% dd[(i - (w - 1)):(i - (w - 1) + w1 - 1), j] -
t(dd[(i - (w - 1) + w1):i, j]) %*% rowvar2[, , i] %*% dd[(i - (w - 1) + w1):i, j]
}
}
}
if (w > 1) {
ee <- ee[-c(1:(w - 1)), ]
}
##debug(root.finding)
adj.alpha <- uniroot(root.finding, interval, ph1mat = ee, FAP0 = FAP0, n = n - q - (w - 1), nsim = nsim, side = side,
tol = 1e-6, verbose = verbose)$root
lim <- matrix(NA, nrow = n - q - (w - 1), ncol = 2)
sig <- matrix(NA, nrow = n - q - (w - 1), ncol = 1)
lim[, 1] <- -Inf
lim[, 2] <- Inf
for (i in 1:(n - q - (w - 1))) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ee[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ee[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- Inf
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ee[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ee[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
#rr <- rank(model$Y[-c(1:q)])
rr <- model$Y[-c(1:q)]
cs <- rr - mm
cc <- rep(NA, n - q)
for (i in w:(n - q)) {
cc[i] <- t(cs[(i - (w - 1)):i]) %*% rowvar[, , i] %*% cs[(i - (w - 1)):i]
if (w > 1) {
cc[i] <- cc[i] -
t(cs[(i - (w - 1)):(i - (w - 1) + w1 - 1)]) %*% rowvar1[, , i] %*% cs[(i - (w - 1)):(i - (w - 1) + w1 - 1)] -
t(cs[(i - (w - 1) + w1):i]) %*% rowvar2[, , i] %*% cs[(i - (w - 1) + w1):i]
}
}
if (w > 1) {
cc <- cc[-c(1:(w - 1))]
}
sig <- 1 - ((lim[, 1] <= cc) & (cc <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cc, "sig" = c(rep(0, w1), sig, rep(0, ceiling(w / 2) - 1)), "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
debug(Ph1MultipleTesting.Y01MH)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 1, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 1, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
library(BayesianLASSOMonitoring)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 1, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
ee
ee[, 1]
ee[1, ]
hist(ee[1, ])
rr
cc
lim
sig
X
undebug(Ph1MultipleTesting.Y01MH)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 3, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
debug(Ph1MultipleTesting.Y01MH)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 3, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
w1
w2
w1
(i - (w - 1)):(i - (w - 1) + w1 - 1),
(i - (w - 1)):(i - (w - 1) + w1 - 1)
(i - (w - 1))
Ph1MultipleTesting.Y01MH <- function(model, w = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0) {
root.finding <- function(adj.alpha, ph1mat, FAP0, n, nsim, side = "right-sided", verbose = 0) {
lim <- matrix(NA, nrow = n, ncol = 2)
sig <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:n) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- Inf
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
for (i in 1:nsim) {
sig[, i] <- (lim[, 1] <= ph1mat[, i]) & (ph1mat[, i] <= lim[, 2])
}
tmp <- mean(colSums(sig) == n, na.rm = TRUE)
dif <- tmp - (1 - FAP0)
if (verbose == 1) {
cat("adj.alpha:", adj.alpha, "\n")
cat("FAP0:", 1 - tmp, "\n")
}
return(dif)
}
q <- dim(model$Phi)[1]
n <- length(model$Y)
nnsim <- dim(model$Phi)[2]
ph1mat <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
Mu0 <- matrix(rep(model$mu0[tmpsel], n))
if (!is.null(model$X)) {
Mu0 <- Mu0 + model$X %*% (model$Beta[, tmpsel] * model$Zeta[, tmpsel])
}
ph1mat[, i] <- simYph2NoY(n - q, as.matrix(model$Y), as.matrix(model$Z[, tmpsel]), as.matrix(model$Phi[, tmpsel]),
Mu0, model$sigma2[tmpsel], updateYJ, model$theta[tmpsel],
leftcensoring, rounding, eps, backtr)
#ph1mat[, i] <- rank(ph1mat[, i])
}
##w <- 1 + hw * 2
#mm <- rowMeans(ph1mat, na.rm = TRUE)
mm <- apply(ph1mat, 1, median, na.rm = TRUE)
dd <- ph1mat - mm
#if (side == "left-sided") {
#  dd[dd > 0] <- 0
#} else if (side == "right-sided") {
#  dd[dd < 0] <- 0
#}
#dd <- abs(dd)
w1 <- floor(w / 2)
w2 <- w - w1
rowvar <- array(NA, dim = c(w, w, n - q))
rowvar1 <- array(NA, dim = c(w1, w1, n - q))
rowvar2 <- array(NA, dim = c(w2, w2, n - q))
ee <- matrix(NA, nrow = n - q, ncol = nsim)
ee1 <- matrix(NA, nrow = n - q, ncol = nsim)
ee2 <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in w:(n - q)) {
if (w > 1) {
rowvar[, , i] <- var(t(ph1mat[(i - (w - 1)):i, ]))
rowvar[, , i] <- solve(rowvar[, , i])
if (w1 > 1) {
rowvar1[, , i] <- var(t(ph1mat[(i - (w - 1)):(i - (w - 1) + w1 - 1), ]))
rowvar1[, , i] <- solve(rowvar1[, , i])
} else {
rowvar1[, , i] <- var(ph1mat[(i - (w - 1)):(i - (w - 1) + w1 - 1), ])
rowvar1[, , i] <- 1 / rowvar1[, , i]
}
if (w2 > 1) {
rowvar2[, , i] <- var(t(ph1mat[(i - (w - 1) + w1):i, ]))
rowvar2[, , i] <- solve(rowvar2[, , i])
} else {
rowvar2[, , i] <- var(ph1mat[(i - (w - 1) + w1):i, ])
rowvar2[, , i] <- 1 / rowvar2[, , i]
}
} else {
rowvar[, , i] <- var(ph1mat[(i - (w - 1)):i, ])
rowvar[, , i] <- 1 / rowvar[, , i]
}
for (j in 1:nsim) {
ee[i, j] <- t(dd[(i - (w - 1)):i, j]) %*% rowvar[, , i] %*% dd[(i - (w - 1)):i, j]
if (w > 1) {
ee[i, j] <- ee[i, j] -
t(dd[(i - (w - 1)):(i - (w - 1) + w1 - 1), j]) %*% rowvar1[, , i] %*% dd[(i - (w - 1)):(i - (w - 1) + w1 - 1), j] -
t(dd[(i - (w - 1) + w1):i, j]) %*% rowvar2[, , i] %*% dd[(i - (w - 1) + w1):i, j]
}
}
}
if (w > 1) {
ee <- ee[-c(1:(w - 1)), ]
}
##debug(root.finding)
adj.alpha <- uniroot(root.finding, interval, ph1mat = ee, FAP0 = FAP0, n = n - q - (w - 1), nsim = nsim, side = side,
tol = 1e-6, verbose = verbose)$root
lim <- matrix(NA, nrow = n - q - (w - 1), ncol = 2)
sig <- matrix(NA, nrow = n - q - (w - 1), ncol = 1)
lim[, 1] <- -Inf
lim[, 2] <- Inf
for (i in 1:(n - q - (w - 1))) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ee[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ee[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- Inf
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ee[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ee[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
#rr <- rank(model$Y[-c(1:q)])
rr <- model$Y[-c(1:q)]
cs <- rr - mm
cc <- rep(NA, n - q)
for (i in w:(n - q)) {
cc[i] <- t(cs[(i - (w - 1)):i]) %*% rowvar[, , i] %*% cs[(i - (w - 1)):i]
if (w > 1) {
cc[i] <- cc[i] -
t(cs[(i - (w - 1)):(i - (w - 1) + w1 - 1)]) %*% rowvar1[, , i] %*% cs[(i - (w - 1)):(i - (w - 1) + w1 - 1)] -
t(cs[(i - (w - 1) + w1):i]) %*% rowvar2[, , i] %*% cs[(i - (w - 1) + w1):i]
}
}
if (w > 1) {
cc <- cc[-c(1:(w - 1))]
}
sig <- 1 - ((lim[, 1] <= cc) & (cc <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cc, "sig" = c(rep(0, w1), sig, rep(0, ceiling(w / 2) - 1)), "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
debug(Ph1MultipleTesting.Y01MH)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 3, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
ee[, 1]
ee[1, ]
hist(ee[1, ])
hist(ee[2, ])
hist(ee[3, ])
adj.alpha
1/0.0004
cc
sig
sig
plot(cc)
ee[, 1]
ee[1, ]
lim[, 2]
cc / lim[, 2]
plot(cc / lim[, 2])
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 3, FAP0 = 0.1, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
#undebug(Ph1MultipleTesting.Y01MH)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 3, FAP0 = 0.1, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
undebug(Ph1MultipleTesting.Y01MH)
#undebug(Ph1MultipleTesting.Y01MH)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 3, FAP0 = 0.1, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
cc1
cc1$grandsig
cc1$cs
plot(cc1$cs)
cc1$grandsig
plot(cc1$cs / cc1$lim[, 2])
#undebug(Ph1MultipleTesting.Y01MH)
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 3, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
cc1$grandsig
cc1$cs
cc1$lim[, 2]
cc1$cs / cc1$lim[, 2]
plot(cc1$cs / cc1$lim[, 2])
cc1 <- Ph1MultipleTesting.Y01MH(bb, w = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
cc1
cc1$cs
cc1$cs / cc1$lim[, 2]
plot(cc1$cs / cc1$lim[, 2])
plot(cc1$cs / cc1$lim[, 2], lty = 'l')
plot(cc1$cs / cc1$lim[, 2], type = 'l')
?p.adjust
Ph1MultipleTesting.GammaLaplaceBC <- function(model, w = 7, FAP0 = 0.05, method = "bonferroni", side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
mm <- apply(TauGamma, 1, median)
cs <- mm / rowMeans(abs(TauGamma - mm))
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - VGAM::plaplace(cs)
} else if (side == "left-sided") {
pvalue <- VGAM::plaplace(cs)
} else {
pvalue1 <- 1 - VGAM::plaplace(cs)
pvalue2 <- VGAM::plaplace(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
bb
seed <- 12345
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "ALASSO",
"mono" = 1,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
Ph1MultipleTesting.GammaLaplaceBC
Ph1MultipleTesting.GammaLaplaceBC(bb, w = 7, FAP0 = 0.05)
Ph1MultipleTesting.GammaLaplaceBC(bb, w = 7, FAP0 = 0.05, side = "two-sided")
Rcpp::compileAttributes()
roxygen2::roxygenise()
