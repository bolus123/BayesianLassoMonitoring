rr1
max(rr1)
max(rr1, na.rm = TRUE)
rr1 <- -(30) * BayesianLASSOMonitoring::movaver(rr, 30) ^ 2 / mean((rr + 1/2) ^ 2)
rr1
plot(rr1)
rr
mean((rr + 1/2) ^ 2)
rr <- rank(bb$Y) - (length(bb$Y) + 1) / 2
rr
BayesianLASSOMonitoring::movaver(rr, 7)
plot(BayesianLASSOMonitoring::movaver(rr, 7))
plot(BayesianLASSOMonitoring::movaver(rr, 14))
plot(BayesianLASSOMonitoring::movaver(rr, 14) - (length(bb$Y) + 1) / 2)
plot(BayesianLASSOMonitoring::movaver(rr, 14))
rr
rr^2
mean(rr^2)
plot(BayesianLASSOMonitoring::movaver(rr, 14) / mean(rr^2))
plot(BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean(rr^2)))
plot(BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean(rr^2)) * sqrt(14))
qq0 <- (BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean(rr^2)) * sqrt(14))^2
qq1 <- ((BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean(rr^2)) * sqrt(7))^2)
qq2 <- (BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean(rr^2)) * sqrt(7))^2
qq0
qq0 <- ((BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean(rr^2)) * sqrt(14))^2)[-c(1:13)]
qq1 <- ((BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean(rr^2)) * sqrt(7))^2)[-c(1:6)]
qq0
length(qq1)
length(qq0)
qq0
length(qq0)
qq0 <- ((BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean(rr^2)) * sqrt(14))^2)[-c(1:13)]
qq1 <- ((BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean(rr^2)) * sqrt(7))^2)[-c(1:6, (178 - 7 + 1):178)]
qq2 <- (BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean(rr^2)) * sqrt(7))^2[-c(1:13)]
qq0 <- ((BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean(rr^2)) * sqrt(14))^2)[-c(1:13)]
qq1 <- ((BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean(rr^2)) * sqrt(7))^2)[-c(1:6, (178 - 7 + 1):178)]
qq2 <- ((BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean(rr^2)) * sqrt(7))^2)[-c(1:13)]
length(qq0)
length(qq1)
length(qq2)
ee <- qq0 - qq1 - qq2
ee
plot(ee)
rr <- rank(bb$Y) - (length(bb$Y) + 1) / 2
rr1 <- -(30) * BayesianLASSOMonitoring::movaver(rr, 30) ^ 2 / mean((rr + 1/2) ^ 2)
qq0 <- -((BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean((rr + 1/2)^2)) * sqrt(14))^2)[-c(1:13)]
qq1 <- -((BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean((rr + 1/2)^2)) * sqrt(7))^2)[-c(1:6, (178 - 7 + 1):178)]
qq2 <- -((BayesianLASSOMonitoring::movaver(rr, 7) / sqrt(mean((rr + 1/2)^2)) * sqrt(7))^2)[-c(1:13)]
ee <- qq0 - qq1 - qq2
ee
plot(ee)
length(ee)
max(ee)
plot(ee type = 'l')
plot(ee, type = 'l')
rr <- rank(bb$Y) - (length(bb$Y) + 1) / 2
rr1 <- -(30) * BayesianLASSOMonitoring::movaver(rr, 30) ^ 2 / mean((rr + 1/2) ^ 2)
qq0 <- -((BayesianLASSOMonitoring::movaver(rr, 30) / sqrt(mean((rr + 1/2)^2)) * sqrt(30))^2)[-c(1:29)]
qq1 <- -((BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean((rr + 1/2)^2)) * sqrt(14))^2)[-c(1:14, (178 - 15 + 1):178)]
qq2 <- -((BayesianLASSOMonitoring::movaver(rr, 14) / sqrt(mean((rr + 1/2)^2)) * sqrt(14))^2)[-c(1:29)]
ee <- qq0 - qq1 - qq2
ee
plot(ee)
plot(ee, type = 'l')
qq0 <- -((BayesianLASSOMonitoring::movaver(rr, 60) / sqrt(mean((rr + 1/2)^2)) * sqrt(60))^2)[-c(1:59)]
qq1 <- -((BayesianLASSOMonitoring::movaver(rr, 30) / sqrt(mean((rr + 1/2)^2)) * sqrt(30))^2)[-c(1:29, (178 - 30 + 1):178)]
qq2 <- -((BayesianLASSOMonitoring::movaver(rr, 30) / sqrt(mean((rr + 1/2)^2)) * sqrt(30))^2)[-c(1:59)]
ee <- qq0 - qq1 - qq2
ee
plot(ee, type = 'l')
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring", "with-transformation")
bb
seed <- 12345
#load(file = "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
#load(file = "C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/dataset/walker_BUPRENORPHINE_model.Rdat")
#load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
seed <- 12345
load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "regression",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
cc0 <- Ph1MultipleTesting.Y01L1(bb, w = 7, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
cc0 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01L1(bb, w = 7, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
cc0
cc0$grandsig
cc0$cs
X
plot(cc0$cs)
cc0$cs
cc0$adj.alpha
1/0.0005
cc0 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01L1(bb, w = 7, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 100000, interval = c(0.000001, 0.499999), verbose = 0)
cc0
cc0$grandsig
cc0$cs
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring", "with-transformation")
seed <- 12345
load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "regression",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
cc0 <- Ph1MultipleTesting.Y01L1(bb, w = 7, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 100000, interval = c(0.000001, 0.499999), verbose = 0)
cc0 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01L1(bb, w = 7, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 100000, interval = c(0.000001, 0.499999), verbose = 0)
cc0$adj.alpha
1/0.00085
cc0$grandsig
cc0$cs
plot(cc0$cs)
plot(cc0$sig)
plot(cc0$lim)
plot(cc0$lim[, 2])
plot(cc0$cs)
cc0$cs
cc0$lim
cc0$cs / cc0$lim[, 2]
plot(cc0$cs / cc0$lim[, 2])
X
pars[X, ]
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "regression",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
cc0 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01L1(bb, w = 7, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 100000, interval = c(0.000001, 0.499999), verbose = 0)
cc0
cc0$adj.alpha
cc0$lim
cc0$sig
cc0$grandsig
cc0$cs
cc0 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01L1(bb, w = 14, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 100000, interval = c(0.000001, 0.499999), verbose = 0)
cc0
cc0$grandsig
cc0$cs
cc0$adj.alpha
apply(cc0$Yph1, 1, median)
plot(apply(cc0$Yph1, 1, median))
cc0 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01L1(bb, w = 14, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 0, eps = 1e-32,
backtr = 1, nsim = 100000, interval = c(0.000001, 0.499999), verbose = 0)
cc0
cc0$grandsig
cc0$cs
apply(cc0$Yph1, 1, median)
plot(apply(cc0$Yph1, 1, median))
plot(bb$Y)
points(apply(cc0$Yph1, 1, median), type = 'l', col = 'red')
plot(bb$Y[-c(1:(5 + 13))])
points(apply(cc0$Yph1, 1, median), type = 'l', col = 'red')
dim(cc0$Yph1)
cc0$cs
plot(cc0$cs)
debug(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01L1)
cc0 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y01L1(bb, w = 14, FAP0 = 0.05, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 0, eps = 1e-32,
backtr = 1, nsim = 100000, interval = c(0.000001, 0.499999), verbose = 0)
plot(mm)
length(mm)
plot(model$Y[-c(1:5)])
points(mm, type = 'l', col = 'red')
dd
colSums(dd)
colSums(dd)
plot(colSums(dd))
hist(colSums(dd))
cumsum(dd)
apply(dd, 2, cumsum)
qq <- apply(dd, 2, cumsum)
qq
rowMeans(apply(dd, 2, cumsum))
qq <- apply(dd, 2, cumsum)
plot(rowMeans(qq))
?cumsum
Ph1MultipleTesting.Y01L1CUMSUM <- function(model, w = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0) {
root.finding <- function(adj.alpha, ph1mat, FAP0, n, nsim, side = "right-sided", verbose = 0) {
lim <- matrix(NA, nrow = n, ncol = 2)
sig <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:n) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- Inf
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
for (i in 1:nsim) {
sig[, i] <- (lim[, 1] <= ph1mat[, i]) & (ph1mat[, i] <= lim[, 2])
}
tmp <- mean(colSums(sig) == n, na.rm = TRUE)
dif <- tmp - (1 - FAP0)
if (verbose == 1) {
cat("adj.alpha:", adj.alpha, "\n")
cat("FAP0:", 1 - tmp, "\n")
}
return(dif)
}
q <- dim(model$Phi)[1]
n <- length(model$Y)
nnsim <- dim(model$Phi)[2]
ph1mat <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
Mu0 <- matrix(rep(model$mu0[tmpsel], n))
if (!is.null(model$X)) {
Mu0 <- Mu0 + model$X %*% (model$Beta[, tmpsel] * model$Zeta[, tmpsel])
}
ph1mat[, i] <- simYph2NoY(n - q, as.matrix(model$Y), as.matrix(model$Z[, tmpsel]), as.matrix(model$Phi[, tmpsel]),
Mu0, model$sigma2[tmpsel], updateYJ, model$theta[tmpsel],
leftcensoring, rounding, eps, backtr)
}
##w <- 1 + hw * 2
mm <- apply(ph1mat, 1, median, na.rm = TRUE)
dd <- ph1mat - mm
#ss <- sqrt(rowMeans(dd ^ 2))
ss <- rowMeans(abs(dd))
dd <- dd / ss
if (side == "left-sided") {
dd[dd > 0] <- 0
} else if (side == "right-sided") {
dd[dd < 0] <- 0
}
dd <- abs(dd)
dd <- apply(dd, 1, cumsum)
if (w > 1) {
dd <- dd[-c(1:(w - 1)), ]
}
##debug(root.finding)
adj.alpha <- uniroot(root.finding, interval, ph1mat = dd, FAP0 = FAP0, n = n - q - (w - 1), nsim = nsim, side = side,
tol = 1e-6, verbose = verbose)$root
lim <- matrix(NA, nrow = n - q - (w - 1), ncol = 2)
sig <- matrix(NA, nrow = n - q - (w - 1), ncol = 1)
lim[, 1] <- -Inf
lim[, 2] <- Inf
for (i in 1:(n - q - (w - 1))) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- Inf
} else if (side == "two-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
cs <- model$Y[-c(1:q)] - mm
cs <- cs / ss
if (side == "left-sided") {
cs[cs > 0] <- 0
} else if (side == "right-sided") {
cs[cs < 0] <- 0
}
cs <- abs(cs)
cs <- cumsum(cs)
if (w > 1) {
cs <- cs[-c(1:(w - 1))]
}
sig <- 1 - ((lim[, 1] <= cs) & (cs <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cs, "sig" = c(rep(0, floor(w / 2)), sig, rep(0, ceiling(w / 2) - 1)), "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
remove.packages("BayesianLASSOMonitoring")
