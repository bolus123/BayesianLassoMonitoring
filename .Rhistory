"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 1,
"rounding" = 0
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
X1 <- object$X[1:TT1, ]
X2 <- object$X[(TT1 + 1):(TT1 + TT2), ]
out <-  rep(NA, 6 * 14)
out1 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset1, w), silent = TRUE)
out1
if (class(out1)[1] == "try-error") {
out1 <- rep(NA, 14)
}
out2 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset2, w), silent = TRUE)
if (class(out2)[1] == "try-error") {
out2 <- rep(NA, 14)
}
out3 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset3, w), silent = TRUE)
if (class(out3)[1] == "try-error") {
out3 <- rep(NA, 14)
}
out4 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset4, w), silent = TRUE)
if (class(out4)[1] == "try-error") {
out4 <- rep(NA, 14)
}
out5 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset5, w), silent = TRUE)
if (class(out5)[1] == "try-error") {
out5 <- rep(NA, 14)
}
out6 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset6, w), silent = TRUE)
if (class(out6)[1] == "try-error") {
out6 <- rep(NA, 14)
}
out <- c(out1, out2, out3, out4, out5, out6)
cat("Gibbs Done at X:", X, "\n")
###############################################
#RSP
###############################################
rr <- dfphase1::rsp(Y1, FALSE, alpha = FAP0, lmin = w)
rr1 <- rr$p[1] <= FAP0
rr2 <- rr$p[2] <= FAP0
rr3 <- (rr1 + rr2) > 0
out <- c(out, rr1, rr2, rr3)
tmp <- try(forecast::auto.arima(Y1, method = "CSS"), silent = TRUE)
if (class(tmp)[1] != "try-error") {
ph1 <- tmp$fitted
ph1[which(ph1 < 0)] <- 0
RMSE.ph1.arima <- sqrt(mean(((Y1 - ph1)^2)))
ph2 <- forecast::forecast(tmp, h = length(Y2))$mean
ph2[which(ph2 < 0)] <- 0
RMSE.ph2.arima <- sqrt(mean((Y2 - ph2) ^ 2))
}
out <- c(out, RMSE.ph1.arima, RMSE.ph2.arima)
out
seed <- 12345
load(file = 'C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_METHADONE_modelB2.Rdat')
object <- modelB2
nnsim <- 100
TT1 <- c(92, 183, 365)
#TT1 <- c(92)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1, 2)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.05
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
#pars <- pars[1:3, ]
tt <- dim(pars)[1]
cat("start at X:", X, "\n")
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- rblasso(TT1 + TT2, ceiling(TT1 * tt), delta, object, leftcensoring = 1, rounding = 0, nsim = 1000)
Y1 <- Y[1:(TT1)]
Y2 <- Y[(TT1 + 1):(TT1 + TT2)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
businessday <- object$X[, which(colnames(object$X) == "businessday")]
nonbusinessday <- 1 - businessday
nonbusinessday <- nonbusinessday[1:TT1]
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
adjZ <- ((nonbusinessday[1:TT1] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 1,
"rounding" = 0
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
X1 <- object$X[1:TT1, ]
X2 <- object$X[(TT1 + 1):(TT1 + TT2), ]
out <-  rep(NA, 6 * 14)
out1 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset1, w), silent = TRUE)
if (class(out1)[1] == "try-error") {
out1 <- rep(NA, 14)
}
out2 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset2, w), silent = TRUE)
if (class(out2)[1] == "try-error") {
out2 <- rep(NA, 14)
}
out3 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset3, w), silent = TRUE)
if (class(out3)[1] == "try-error") {
out3 <- rep(NA, 14)
}
out4 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset4, w), silent = TRUE)
if (class(out4)[1] == "try-error") {
out4 <- rep(NA, 14)
}
out5 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset5, w), silent = TRUE)
if (class(out5)[1] == "try-error") {
out5 <- rep(NA, 14)
}
out6 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset6, w), silent = TRUE)
if (class(out6)[1] == "try-error") {
out6 <- rep(NA, 14)
}
out <- c(out1, out2, out3, out4, out5, out6)
cat("Gibbs Done at X:", X, "\n")
###############################################
#RSP
###############################################
rr <- dfphase1::rsp(Y1, FALSE, alpha = FAP0, lmin = w)
rr1 <- rr$p[1] <= FAP0
rr2 <- rr$p[2] <= FAP0
rr3 <- (rr1 + rr2) > 0
out <- c(out, rr1, rr2, rr3)
tmp <- try(forecast::auto.arima(Y1, method = "CSS"), silent = TRUE)
if (class(tmp)[1] != "try-error") {
ph1 <- tmp$fitted
ph1[which(ph1 < 0)] <- 0
RMSE.ph1.arima <- sqrt(mean(((Y1 - ph1)^2)))
ph2 <- forecast::forecast(tmp, h = length(Y2))$mean
ph2[which(ph2 < 0)] <- 0
RMSE.ph2.arima <- sqrt(mean((Y2 - ph2) ^ 2))
}
out <- c(out, RMSE.ph1.arima, RMSE.ph2.arima)
out
object
library(parallel)
seed <- 12345
load(file = 'C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_BUPRENORPHINE_modelB2.Rdat')
library(parallel)
seed <- 12345
load(file = 'C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_BUPRENORPHINE_modelB2.Rdat')
object <- modelB2
nnsim <- 100
TT1 <- c(92, 183, 365)
#TT1 <- c(92)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1, 2)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.05
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
cat("start at X:", X, "\n")
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- rblasso(TT1 + TT2, ceiling(TT1 * tt), delta, object, leftcensoring = 1, rounding = 0, nsim = 1000)
Y1 <- Y[1:(TT1)]
Y2 <- Y[(TT1 + 1):(TT1 + TT2)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
businessday <- object$X[, which(colnames(object$X) == "businessday")]
nonbusinessday <- 1 - businessday
nonbusinessday <- nonbusinessday[1:TT1]
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
adjZ <- ((nonbusinessday[1:TT1] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 1,
"rounding" = 0
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
X1 <- object$X[1:TT1, ]
X2 <- object$X[(TT1 + 1):(TT1 + TT2), ]
out <-  rep(NA, 6 * 14)
out1 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset1, w), silent = TRUE)
if (class(out1)[1] == "try-error") {
out1 <- rep(NA, 14)
}
out2 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset2, w), silent = TRUE)
if (class(out2)[1] == "try-error") {
out2 <- rep(NA, 14)
}
out3 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset3, w), silent = TRUE)
if (class(out3)[1] == "try-error") {
out3 <- rep(NA, 14)
}
out4 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset4, w), silent = TRUE)
if (class(out4)[1] == "try-error") {
out4 <- rep(NA, 14)
}
out5 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset5, w), silent = TRUE)
if (class(out5)[1] == "try-error") {
out5 <- rep(NA, 14)
}
out6 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset6, w), silent = TRUE)
if (class(out6)[1] == "try-error") {
out6 <- rep(NA, 14)
}
out <- c(out1, out2, out3, out4, out5, out6)
cat("Gibbs Done at X:", X, "\n")
###############################################
#RSP
###############################################
rr <- dfphase1::rsp(Y1, FALSE, alpha = FAP0, lmin = w)
rr1 <- rr$p[1] <= FAP0
rr2 <- rr$p[2] <= FAP0
rr3 <- (rr1 + rr2) > 0
out <- c(out, rr1, rr2, rr3)
tmp <- try(forecast::auto.arima(Y1, method = "CSS"), silent = TRUE)
if (class(tmp)[1] != "try-error") {
ph1 <- tmp$fitted
ph1[which(ph1 < 0)] <- 0
RMSE.ph1.arima <- sqrt(mean(((Y1 - ph1)^2)))
ph2 <- forecast::forecast(tmp, h = length(Y2))$mean
ph2[which(ph2 < 0)] <- 0
RMSE.ph2.arima <- sqrt(mean((Y2 - ph2) ^ 2))
}
out <- c(out, RMSE.ph1.arima, RMSE.ph2.arima)
pars
X <- 81
load(file = 'C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_BUPRENORPHINE_modelB2.Rdat')
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- rblasso(TT1 + TT2, ceiling(TT1 * tt), delta, object, leftcensoring = 1, rounding = 0, nsim = 1000)
Y1 <- Y[1:(TT1)]
Y2 <- Y[(TT1 + 1):(TT1 + TT2)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
businessday <- object$X[, which(colnames(object$X) == "businessday")]
nonbusinessday <- 1 - businessday
nonbusinessday <- nonbusinessday[1:TT1]
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
adjZ <- ((nonbusinessday[1:TT1] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 1,
"rounding" = 0
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
X1 <- object$X[1:TT1, ]
X2 <- object$X[(TT1 + 1):(TT1 + TT2), ]
out <-  rep(NA, 6 * 14)
out1 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset1, w), silent = TRUE)
