m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
mm <- apply(TauGamma, 1, median)
cs <- mm / rowMeans(abs(TauGamma - mm))
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - VGAM::plaplace(cs)
} else if (side == "left-sided") {
pvalue <- VGAM::plaplace(cs)
} else {
pvalue1 <- 1 - VGAM::plaplace(cs)
pvalue2 <- VGAM::plaplace(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
bb
seed <- 12345
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "ALASSO",
"mono" = 1,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
Ph1MultipleTesting.GammaLaplaceBC
Ph1MultipleTesting.GammaLaplaceBC(bb, w = 7, FAP0 = 0.05)
Ph1MultipleTesting.GammaLaplaceBC(bb, w = 7, FAP0 = 0.05, side = "two-sided")
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
Ph1MultipleTesting.GammaNormBC <- function(model, w = 7, FAP0 = 0.2, side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
cs <- rowMeans(TauGamma) / apply(TauGamma, 1, sd)
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
bb
seed <- 12345
#load(file = "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
#load(file = "C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/dataset/walker_BUPRENORPHINE_model.Rdat")
#load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "ALASSO",
"mono" = 1,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
Ph1MultipleTesting.GammaNormBC <- function(model, w = 7, FAP0 = 0.2, side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
cs <- rowMeans(TauGamma) / apply(TauGamma, 1, sd)
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
#' Bayesian LASSO Phase I Monitoring
#'
#' gets a posterior sample using Gibbs sampling for Random Flexible Level Shift Model
#' @param model is model.
#' @param nsim is .
#' @param FAP0 is
#' @param log is model.
#' @param const is .
#' @param sta is
#'
#'
#' @export
Ph1MultipleTesting.GammaLaplaceBC <- function(model, w = 7, FAP0 = 0.05, method = "bonferroni", side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
mm <- apply(TauGamma, 1, median)
cs <- mm / rowMeans(abs(TauGamma - mm))
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - VGAM::plaplace(cs)
} else if (side == "left-sided") {
pvalue <- VGAM::plaplace(cs)
} else {
pvalue1 <- 1 - VGAM::plaplace(cs)
pvalue2 <- VGAM::plaplace(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
cc <- Ph1MultipleTesting.GammaLaplaceBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
cc1 <- Ph1MultipleTesting.GammaNormBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
#' Bayesian LASSO Phase I Monitoring
#'
#' gets a posterior sample using Gibbs sampling for Random Flexible Level Shift Model
#' @param model is model.
#' @param nsim is .
#' @param FAP0 is
#' @param log is model.
#' @param const is .
#' @param sta is
#'
#'
#' @export
Ph1MultipleTesting.GammaNormBC <- function(model, w = 7, FAP0 = 0.05, method = "bonferroni", side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
cs <- rowMeans(TauGamma) / apply(TauGamma, 1, sd)
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
#' Bayesian LASSO Phase I Monitoring
#'
#' gets a posterior sample using Gibbs sampling for Random Flexible Level Shift Model
#' @param model is model.
#' @param nsim is .
#' @param FAP0 is
#' @param log is model.
#' @param const is .
#' @param sta is
#'
#'
#' @export
Ph1MultipleTesting.GammaLaplaceBC <- function(model, w = 7, FAP0 = 0.05, method = "bonferroni", side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- (model$Tau * model$Gamma)
mm <- apply(TauGamma, 1, median)
cs <- mm / rowMeans(abs(TauGamma - mm))
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - VGAM::plaplace(cs)
} else if (side == "left-sided") {
pvalue <- VGAM::plaplace(cs)
} else {
pvalue1 <- 1 - VGAM::plaplace(cs)
pvalue2 <- VGAM::plaplace(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
cc <- Ph1MultipleTesting.GammaLaplaceBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
cc1 <- Ph1MultipleTesting.GammaNormBC(bb, w = 7, FAP0 = 0.05, side = "right-sided")
cc
cc1
Rcpp::compileAttributes()
roxygen2::roxygenise()
