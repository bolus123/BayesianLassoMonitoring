if (side == "left-sided") {
tmp[tmp > 0] <- 0
} else if (side == "right-sided") {
tmp[tmp < 0] <- 0
}
tmp <- abs(tmp)
cs[i] <- cs[i] + tmp
}
}
cs <- cs / w
} else {
cs <- tmpY
}
sig <- 1 - ((lim[, 1] <= cs) & (cs <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cs, "sig" = c(rep(0, w - 1), sig), "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
debug(Ph1MultipleTesting.Y01RollL1)
dd1 <- Ph1MultipleTesting.Y01RollL1(bb, hw = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
Ph1MultipleTesting.Y01RollL1 <- function(model, hw = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0) {
root.finding <- function(adj.alpha, ph1mat, FAP0, n, nsim, side = "right-sided", verbose = 0) {
lim <- matrix(NA, nrow = n, ncol = 2)
sig <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:n) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
for (i in 1:nsim) {
sig[, i] <- (lim[, 1] <= ph1mat[, i]) & (ph1mat[, i] <= lim[, 2])
}
tmp <- mean(colSums(sig) == n, na.rm = TRUE)
dif <- tmp - (1 - FAP0)
if (verbose == 1) {
cat("adj.alpha:", adj.alpha, "\n")
cat("FAP0:", 1 - tmp, "\n")
}
return(dif)
}
q <- dim(model$Phi)[1]
n <- length(model$Y)
nnsim <- dim(model$Phi)[2]
ph1mat <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
Mu0 <- matrix(rep(model$mu0[tmpsel], n))
if (!is.null(model$X)) {
Mu0 <- Mu0 + model$X %*% (model$Beta[, tmpsel] * model$Zeta[, tmpsel])
}
ph1mat[, i] <- simYph2(0, as.matrix(model$Y), as.matrix(model$Z[, tmpsel]), as.matrix(model$Phi[, tmpsel]),
Mu0, model$sigma2[tmpsel], updateYJ, model$theta[tmpsel],
leftcensoring, rounding, eps, backtr)
}
w <- 1 + hw * 2
dd <- matrix(0, nrow = n - q - w + 1, ncol = nsim)
if (w > 1) {
for (i in 1:(n - q - w + 1)) {
tmp0 <- ph1mat[i:(i + w - 1), ]
tmp1 <- ph1mat[i:(i + hw - 1), ]
tmp2 <- ph1mat[(i + hw):(i + w - 1), ]
tmpmn0 <- apply(tmp0, 2, median)
tmpmn1 <- apply(tmp1, 2, median)
tmpmn2 <- apply(tmp2, 2, median)
tmpcs0 <- colSums(abs(tmp0 - matrix(rep(tmpmn0, w), nrow = w, byrow = T)))
tmpcs1 <- colSums(abs(tmp1 - matrix(rep(tmpmn1, hw), nrow = hw, byrow = T)))
tmpcs2 <- colSums(abs(tmp2 - matrix(rep(tmpmn2, hw + 1), nrow = hw + 1, byrow = T)))
dd[i, ] <- tmpcs0 - tmpcs1 - tmpcs2
}
} else {
dd <- ph1mat
}
##debug(root.finding)
adj.alpha <- uniroot(root.finding, interval, ph1mat = dd, FAP0 = FAP0, n = n - q - (w - 1), nsim = nsim, side = side,
tol = 1e-6, verbose = verbose)$root
lim <- matrix(NA, nrow = n - q - (w - 1), ncol = 2)
sig <- matrix(NA, nrow = n - q - (w - 1), ncol = 1)
lim[, 1] <- -Inf
lim[, 2] <- Inf
for (i in 1:(n - q - (w - 1))) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
cs <- rep(0, n - q - w + 1)
if (w > 1) {
tmpY <- model$Y[-c(1:q)]
mm <- zoo::rollmedian(tmpY, w)
for (i in 1:(n - q - w + 1)) {
for (j in 1:w) {
tmp <- tmpY[i + j - 1] - mm[i]
if (side == "left-sided") {
tmp[tmp > 0] <- 0
} else if (side == "right-sided") {
tmp[tmp < 0] <- 0
}
tmp <- abs(tmp)
cs[i] <- cs[i] + tmp
}
}
cs <- cs / w
} else {
cs <- tmpY
}
sig <- 1 - ((lim[, 1] <= cs) & (cs <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cs, "sig" = c(rep(0, w - 1), sig), "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
debug(Ph1MultipleTesting.Y01RollL1)
dd1 <- Ph1MultipleTesting.Y01RollL1(bb, hw = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
tmpcs2
dd
dd[1, ]
tmpmn1
tmpmn2
adj.alpha
adj.alpha
Ph1MultipleTesting.Y01RollL1 <- function(model, hw = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0) {
root.finding <- function(adj.alpha, ph1mat, FAP0, n, nsim, side = "right-sided", verbose = 0) {
lim <- matrix(NA, nrow = n, ncol = 2)
sig <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:n) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(ph1mat[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(ph1mat[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
for (i in 1:nsim) {
sig[, i] <- (lim[, 1] <= ph1mat[, i]) & (ph1mat[, i] <= lim[, 2])
}
tmp <- mean(colSums(sig) == n, na.rm = TRUE)
dif <- tmp - (1 - FAP0)
if (verbose == 1) {
cat("adj.alpha:", adj.alpha, "\n")
cat("FAP0:", 1 - tmp, "\n")
}
return(dif)
}
q <- dim(model$Phi)[1]
n <- length(model$Y)
nnsim <- dim(model$Phi)[2]
ph1mat <- matrix(NA, nrow = n - q, ncol = nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
Mu0 <- matrix(rep(model$mu0[tmpsel], n))
if (!is.null(model$X)) {
Mu0 <- Mu0 + model$X %*% (model$Beta[, tmpsel] * model$Zeta[, tmpsel])
}
ph1mat[, i] <- simYph2(0, as.matrix(model$Y), as.matrix(model$Z[, tmpsel]), as.matrix(model$Phi[, tmpsel]),
Mu0, model$sigma2[tmpsel], updateYJ, model$theta[tmpsel],
leftcensoring, rounding, eps, backtr)
}
w <- 1 + hw * 2
dd <- matrix(0, nrow = n - q - w + 1, ncol = nsim)
if (w > 1) {
for (i in 1:(n - q - w + 1)) {
tmp0 <- ph1mat[i:(i + w - 1), ]
tmp1 <- ph1mat[i:(i + hw - 1), ]
tmp2 <- ph1mat[(i + hw):(i + w - 1), ]
tmpmn0 <- apply(tmp0, 2, median)
tmpmn1 <- apply(tmp1, 2, median)
tmpmn2 <- apply(tmp2, 2, median)
tmpcs0 <- colSums(abs(tmp0 - matrix(rep(tmpmn0, w), nrow = w, byrow = T)))
tmpcs1 <- colSums(abs(tmp1 - matrix(rep(tmpmn1, hw), nrow = hw, byrow = T)))
tmpcs2 <- colSums(abs(tmp2 - matrix(rep(tmpmn2, hw + 1), nrow = hw + 1, byrow = T)))
dd[i, ] <- tmpcs0 - tmpcs1 - tmpcs2
}
} else {
dd <- ph1mat
}
##debug(root.finding)
adj.alpha <- uniroot(root.finding, interval, ph1mat = dd, FAP0 = FAP0, n = n - q - (w - 1), nsim = nsim, side = side,
tol = 1e-6, verbose = verbose)$root
lim <- matrix(NA, nrow = n - q - (w - 1), ncol = 2)
sig <- matrix(NA, nrow = n - q - (w - 1), ncol = 1)
lim[, 1] <- -Inf
lim[, 2] <- Inf
for (i in 1:(n - q - (w - 1))) {
if (side == "right-sided") {
lim[i, 1] <- -Inf
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha, na.rm = TRUE)
} else if (side == "left-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha, na.rm = TRUE)
lim[i, 2] <- infert
} else if (side == "two-sided") {
lim[i, 1] <- quantile(dd[i, ], adj.alpha / 2, na.rm = TRUE)
lim[i, 2] <- quantile(dd[i, ], 1 - adj.alpha / 2, na.rm = TRUE)
}
}
cs <- rep(0, n - q - w + 1)
if (w > 1) {
tmpY <- model$Y[-c(1:q)]
for (i in 1:(n - q - w + 1)) {
tmp0 <- tmpY[i:(i + w - 1)]
tmp1 <- tmpY[i:(i + hw - 1)]
tmp2 <- tmpY[(i + hw):(i + w - 1)]
tmpmn0 <- median(tmp0)
tmpmn1 <- median(tmp1)
tmpmn2 <- median(tmp2)
tmpcs0 <- sum(tmp0 - tmpmn0)
tmpcs1 <- sum(tmp1 - tmpmn1)
tmpcs2 <- sum(tmp2 - tmpmn2)
cs[i] <- tmpcs0 - tmpcs1 - tmpcs2
}
} else {
cs <- tmpY
}
sig <- 1 - ((lim[, 1] <= cs) & (cs <= lim[, 2]))
list("grandsig" = sum(sig) > 0, "cs" = cs, "sig" = c(rep(0, w - 1), sig), "lim" = lim, "adj.alpha" = adj.alpha,
"Yph1" = ph1mat)
}
debug(Ph1MultipleTesting.Y01RollL1)
dd1 <- Ph1MultipleTesting.Y01RollL1(bb, hw = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
adj.alpha
tmpmn0
tmp0
X
cs
plot(c)
plot(cs)
lim[, 1]
lim[, 2]
sig
X
undebug(Ph1MultipleTesting.Y01RollL1)
seed <- 12345
#load(file = "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
#load(file = "C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/dataset/walker_BUPRENORPHINE_model.Rdat")
#load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 2
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "regression",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 0, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
dd1 <- Ph1MultipleTesting.Y01RollL1(bb, hw = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
dd1$grandsig
dd1$cs
dd1$lim
dd1$sig
dd1$grandsig
dd1$cs
plot(dd1$cs)
plot(dd1$cs / dd1$lim[, 2])
plot(dd1$cs / dd1$lim[, 2], type = 'l')
plot(dd1$cs)
plot(dd1$cs, type = 'l')
points(dd1$limp[, 2], type = 'l', col = 'red')
points(dd1$lim[, 2], type = 'l', col = 'red')
X
plot(apply(bb$Mu, 1, median))
plot(apply(bb$Mu, 1, median), type = 'l')
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 0, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
dd1 <- Ph1MultipleTesting.Y01RollL1(bb, hw = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
dd1$cs
dd1$grandsig
dd1$sig
cc$grandsig
cc$grandsig
cc$sig
X
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 7, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
cc$grandsig
cc$cs
plot(cc$grandsig)
plot(cc$cs)
plot(cc$cs / cc$lim[, 2])
plot(cc$cs / cc$lim[, 2], type = 'l')
plot(smooth(cc$cs / cc$lim[, 2]), type = 'l')
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 3, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
plot(smooth(cc$cs / cc$lim[, 2]), type = 'l')
cc$grandsig
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 15, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 14, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
plot(smooth(cc$cs / cc$lim[, 2]), type = 'l')
cc$grandsig
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 30, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
plot(smooth(cc$cs / cc$lim[, 2]), type = 'l')
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 30, FAP0 = 0.2, side = "two-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
plot(smooth(cc$cs / cc$lim[, 2]), type = 'l')
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 3, FAP0 = 0.2, side = "two-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
plot(smooth(cc$cs / cc$lim[, 2]), type = 'l')
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 7, FAP0 = 0.2, side = "two-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
plot(smooth(cc$cs / cc$lim[, 2]), type = 'l')
seed <- 12345
#load(file = "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
#load(file = "C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/dataset/walker_BUPRENORPHINE_model.Rdat")
#load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset <- list(
"method" = "regression",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
#debug(Ph1MultipleTesting.Y01L1)
cc <- Ph1MultipleTesting.Y01L1(bb, hw = 3, FAP0 = 0.2, side = "right-sided",
updateYJ = 1, leftcensoring = 1, rounding = 1, eps = 1e-32,
backtr = 1, nsim = 10000, interval = c(0.000001, 0.499999), verbose = 0)
Rcpp::compileAttributes()
roxygen2::roxygenize()
roxygen2::roxygenize()
