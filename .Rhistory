H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
Zlb <- rep(0, 183)
Zub <- rep(0, 183)
adjZ <- ((notbusinessday[1:183] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset <- list(
"method" = "ALASSO",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring", "with-transformation")
seed <- 12345
#load(file = "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
#load(file = "C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/dataset/walker_BUPRENORPHINE_model.Rdat")
#load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
notbusinessday <- 1 - businessday
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
Zlb <- rep(0, 183)
Zub <- rep(0, 183)
adjZ <- ((notbusinessday[1:183] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset <- list(
"method" = "ALASSO",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
cc <- bb$H %*% (bb$Tau * bb$Gamma)
cc
dim(cc)
hist(cc[183, ])
hist(cc[170, ])
hist(cc[150, ])
hist(cc[120, ])
hist(cc[50, ])
hist(cc[180, ])
var(t(cc))
cor(t(cc))
dd <- chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.GammaNormCUMSUMBC(chart1, w = w, FAP0 = FAP0, method = "none", side = side), silent = TRUE)
chart3 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.GammaNormCUMSUMBC(chart1, w = w, FAP0 = FAP0, method = "holm", side = side), silent = TRUE)
chart4 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.GammaNormCUMSUMBC(chart1, w = w, FAP0 = FAP0, method = "BH", side = side), silent = TRUE)
dd <- cor(t(cc))
dd
cc[182:183, ]
bb
cc
cc <- bb$H %*% (bb$Tau * bb$Gamma)
dim(cc)
dd <- t(cc)
dd
colMeans(dd)
plot(colMeans(dd))
debug(BayesianLASSOMonitoring::Ph1MultipleTesting.GammaNormCUMSUMBC)
cc <- BayesianLASSOMonitoring::Ph1MultipleTesting.GammaNormCUMSUMBC(bb)
cs
sig
tmpsig
cs
dd <- BayesianLASSOMonitoring::Ph1MultipleTesting.GammaLaplaceBC(bb)
dd
?BayesianLASSOMonitoring::Ph1MultipleTesting.GammaLaplaceBC
BayesianLASSOMonitoring::Ph1MultipleTesting.GammaLaplaceBC
dd <- BayesianLASSOMonitoring::Ph1MultipleTesting.GammaLaplaceBC(bb, method = 'holm')
dd
dd <- BayesianLASSOMonitoring::Ph1MultipleTesting.GammaLaplaceBC(bb, method = 'BH')
dd
dd <- BayesianLASSOMonitoring::Ph1MultipleTesting.GammaNormBC(bb, method = 'BH')
dd
bb$Tau * bb$Gamma
bb$Tau * bb$Gamma[, 1]
dim(bb$Tau * bb$Gamma)
bb$Tau * bb$Gamma[1, ]
hist(bb$Tau * bb$Gamma[1, ])
bb$Tau[1, ] == 0
ee1 <- bb$Tau[1, ] == 0
ee1
ee2 <- bb$Gamma[1, bb$Tau == 1]
ee2 <- bb$Gamma[1, bb$Tau == 1]
ee2 <- bb$Gamma[1, bb$Tau[1, ] == 1]
ee1
ee1
ee2
hist(ee2)
ee1
mean(bb$Tau == 0)
mean(bb$Tau == 1)
mean(bb$Tau == 1)
ee1 <- bb$Tau[23, ] == 0
ee2 <- bb$Gamma[23, bb$Tau[23, ] == 1]
ee1
mean(ee1)
ee2
hist(ee2)
ee2 <- bb$Gamma[23, ] * bb$Tau[23, ]
hist(ee2)
mean(bb$Gamma[23, bb$Tau[23, ] == 1])
mean(bb$Gamma[23, bb$Tau[23, ] == 1]) / sd(bb$Gamma[23, bb$Tau[23, ] == 1])
hist(bb$Gamma[23, bb$Tau[23, ] == 1])
hist(bb$Gamma[22, bb$Tau[22, ] == 1])
hist(bb$Gamma[21, bb$Tau[21, ] == 1])
hist(bb$Gamma[20, bb$Tau[20, ] == 1])
hist(bb$Gamma[19, bb$Tau[19, ] == 1])
hist(bb$Gamma[18, bb$Tau[18, ] == 1])
BayesianLASSOMonitoring::Ph1MultipleTesting.GammaNormBC
BayesianLASSOMonitoring::Ph1MultipleTesting.GammaLaplaceBC
bb
hist(bb$Gamma[18, bb$Tau[18, ] == 1])
sd(bb$Gamma[18, bb$Tau[18, ] == 1]))
sd(bb$Gamma[18, bb$Tau[18, ] == 1])
mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1])
pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1]))
mean(bb$Tau[18, ] == 0)
mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1)
mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1) * pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1]))
mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1)
1 - mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1) * pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1]))
1 - (mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1) * pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1])))
1 - (mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1) * (1 - pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1]))))
mean(bb$Tau[18, ] == 1) * (1 - pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1]))
)
mean(bb$Tau[18, ] == 1) * (1 - pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1])))
mean(bb$Tau[18, ] == 1) * (pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1])))
hist(bb$Tau[18, ] * bb$Gamma[18, ])
mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1) * pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1]))
mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1) * pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1]))
1 - (mean(bb$Tau[18, ] == 0) + mean(bb$Tau[18, ] == 1) * pnorm(mean(bb$Gamma[18, bb$Tau[18, ] == 1]) / sd(bb$Gamma[18, bb$Tau[18, ] == 1])))
bb$Tau == 0
bb$Gamma[bb$Tau == 1]
dim(bb$Gamma[bb$Tau == 1])
tmp <- bb$Tau == 0
tmp == FALSE
rowMeans(tmp == FALSE)
tmp
rowMeans(tmp)
rowMeans(tmp == FALSE)
i <- 1
m <- dim(bb$Gamma)[2]
pvalue <- rep(1, m)
tmp <- bb$Tau[i, ] == 0
tmp
mean(tmp)
sd(10)
test <- function(bb, FAP0 = 0.05, method = 'holm') {
m <- dim(bb$Gamma)[2]
pvalue <- rep(1, m)
if (i in 1:m) {
test <- function(bb, FAP0 = 0.05, method = 'holm') {
m <- dim(bb$Gamma)[2]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- bb$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(bb$Gamma[tmp, ])
tmpgammasd <- sd(bb$Gamma[tmp, ])
if (!is.na(tmpgammasd)) {
pvalue[i] <- 1 - (tmpmean + (1 - tmpmean) * pnorm(mean(bb$Gamma[tmp, ]) / sd(bb$Gamma[tmp, ])))
}
}
pvalue
}
test(bb)
debug(test)
test(bb)
test(bb)
tmp
test <- function(bb, FAP0 = 0.05, method = 'holm') {
m <- dim(bb$Gamma)[2]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- bb$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(bb$Gamma[i, !tmp])
tmpgammasd <- sd(bb$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
pvalue[i] <- 1 - (tmpmean + (1 - tmpmean) * pnorm(mean(bb$Gamma[tmp, ]) / sd(bb$Gamma[tmp, ])))
}
}
pvalue
}
test(bb)
debug(test)
test(bb)
test(bb)
test <- function(bb, FAP0 = 0.05, method = 'holm') {
m <- dim(bb$Gamma)[2]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- bb$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(bb$Gamma[])
tmpgammasd <- sd(bb$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
pvalue[i] <- 1 - (tmpmean + (1 - tmpmean) * pnorm(mean(bb$Gamma[i, !tmp]) / sd(bb$Gamma[i, !tmp])))
}
}
pvalue
}
test(bb)
debug(test)
test(bb)
pvalue
test(bb)
test <- function(bb, FAP0 = 0.05, method = 'holm') {
m <- dim(bb$Gamma)[1]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- bb$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(bb$Gamma[])
tmpgammasd <- sd(bb$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
pvalue[i] <- 1 - (tmpmean + (1 - tmpmean) * pnorm(mean(bb$Gamma[i, !tmp]) / sd(bb$Gamma[i, !tmp])))
}
}
pvalue
}
test(bb)
p.adjust(test(bb), method = "holm")
test <- function(bb, FAP0 = 0.05, method = 'holm') {
m <- dim(bb$Gamma)[1]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- bb$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(bb$Gamma[])
tmpgammasd <- sd(bb$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
pvalue[i] <- 1 - ((1 - tmpmean) * pnorm(mean(bb$Gamma[i, !tmp]) / sd(bb$Gamma[i, !tmp])))
}
}
pvalue
}
p.adjust(test(bb), method = "holm")
test(b)
test(bb)
test <- function(bb, FAP0 = 0.05, method = 'holm') {
m <- dim(bb$Gamma)[1]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- bb$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(bb$Gamma[])
tmpgammasd <- sd(bb$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
pvalue[i] <- (1 - tmpmean) * (1 - pnorm(tmpgammamean / tmpgammasd))
}
}
pvalue
}
test(bb)
test <- function(bb, FAP0 = 0.05, method = 'holm') {
m <- dim(bb$Gamma)[1]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- bb$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(bb$Gamma[i, !tmp])
tmpgammasd <- sd(bb$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
pvalue[i] <- (1 - tmpmean) * (1 - pnorm(tmpgammamean / tmpgammasd))
}
}
pvalue
}
test(bb)
plot(i, !tmp)
plot(test[bb])
plot(test(bb))
plot(test(bb), type = 'l')
test <- function(model, FAP0 = 0.05, method = 'holm', side = "right-sided") {
m <- dim(model$Gamma)[1]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- model$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(model$Gamma[i, !tmp])
tmpgammasd <- sd(model$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
if (side == "right-sided") {
pvalue[i] <- (1 - tmpmean) * (1 - pnorm(tmpgammamean / tmpgammasd))
} else if (side == "left-sided") {
pvalue[i] <- (1 - tmpmean) * (pnorm(tmpgammamean / tmpgammasd))
} else {
tmppvalue1 <- 1 - pnorm(tmpgammamean / tmpgammasd)
tmppvalue2 <- pnorm(tmpgammamean / tmpgammasd)
pvalue[i] <- (1 - tmpmean) * (2 * min(tmppvalue1, tmppvalue2))
}
}
}
adj.pvalue = p.adjust(pvalue, method)
sig <- adj.pvalue <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "sig" = sig, "pvalue" = pvalue, "adj.pvalue" = adj.pvalue)
}
ee <- test(bb)
ee
test <- function(model, FAP0 = 0.05, method = 'holm', side = "right-sided") {
m <- dim(model$Gamma)[1]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- model$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(model$Gamma[i, !tmp])
tmpgammasd <- sd(model$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
if (side == "right-sided") {
pvalue[i] <- (1 - tmpmean) * (1 - pnorm(tmpgammamean / tmpgammasd))
} else if (side == "left-sided") {
pvalue[i] <- (1 - tmpmean) * (pnorm(tmpgammamean / tmpgammasd))
} else {
tmppvalue1 <- 1 - pnorm(tmpgammamean / tmpgammasd)
tmppvalue2 <- pnorm(tmpgammamean / tmpgammasd)
pvalue[i] <- (1 - tmpmean) * (2 * min(tmppvalue1, tmppvalue2))
}
}
}
adj.pvalue = p.adjust(pvalue, method)
sig <- adj.pvalue <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "sig" = tmpsig,
"parsig" = sig, "pvalue" = pvalue, "adj.pvalue" = adj.pvalue)
}
ee <- test(bb)
ee
test <- function(model, w = 7, FAP0 = 0.05, method = 'holm', side = "right-sided") {
m <- dim(model$Gamma)[1]
pvalue <- rep(1, m)
for (i in 1:m) {
tmp <- model$Tau[i, ] == 0
tmpmean <- mean(tmp)
tmpgammamean <- mean(model$Gamma[i, !tmp])
tmpgammasd <- sd(model$Gamma[i, !tmp])
if (!is.na(tmpgammasd)) {
if (side == "right-sided") {
pvalue[i] <- (1 - tmpmean) * (1 - pnorm(tmpgammamean / tmpgammasd))
} else if (side == "left-sided") {
pvalue[i] <- (1 - tmpmean) * (pnorm(tmpgammamean / tmpgammasd))
} else {
tmppvalue1 <- 1 - pnorm(tmpgammamean / tmpgammasd)
tmppvalue2 <- pnorm(tmpgammamean / tmpgammasd)
pvalue[i] <- (1 - tmpmean) * (2 * min(tmppvalue1, tmppvalue2))
}
}
}
adj.pvalue = p.adjust(pvalue, method)
sig <- adj.pvalue <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig <- diff(model$H %*% sig)
tmpsig[tmpsig < 0] <- 0
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "sig" = tmpsig,
"parsig" = sig, "pvalue" = pvalue, "adj.pvalue" = adj.pvalue)
}
ee <- test(bb)
ee
ee <- test(bb, side = 'two-sided')
ee
ee <- test(bb, side = 'left-sided')
ee
plot(ee$adj.pvalue)
ee <- test(bb, side = 'right-sided')
plot(ee$adj.pvalue)
Rcpp::compileAttributes()
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
