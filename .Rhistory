businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
nonbusinessday <- 1 - businessday
nonbusinessday <- nonbusinessday[1:TT1]
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
adjZ <- ((notbusinessday[1:TT1] == 1) + (Y1 == 0)) == 2
nonbusinessday <- 1 - businessday
nonbusinessday <- nonbusinessday[1:TT1]
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
adjZ <- ((nonbusinessday[1:TT1] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
bset <- bset1
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X = X1, H = H1), silent = TRUE)
seed <- 12345
#load(file = "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
#load(file = "C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/dataset/walker_BUPRENORPHINE_model.Rdat")
#load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
load(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 4
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
notbusinessday <- 1 - businessday
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(2, TT1 - q, 7)]
H1 <- H1[, which(colSums(H1) >= 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
Zlb <- rep(0, 183)
Zub <- rep(0, 183)
adjZ <- ((notbusinessday[1:183] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset <- list(
"method" = "ALASSO",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X1, H1)
remove.packages("BayesianLASSOMonitoring")
remove.packages("BayesianLASSOMonitoring")
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring", "with-transformation")
#devtools::install_github("davidsovich/usgeogr")
library(usgeogr)
ER <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ER_opioid_2016_2019_cleaned.csv")
ARCOS <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ARCOS_AL_2016_2019_cleaned.csv")
#ER <- read.csv(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ER_opioid_2016_2019_cleaned.csv")
#ARCOS <- read.csv(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ARCOS_AL_2016_2019_cleaned.csv")
County <- c(
"Lauderdale",
"Limestone",
"Madison",
"Jackson",
"Colbert",
"Franklin",
"Lawrence",
"Morgan",
"Marshall",
"De kalb",
"Marion",
"Winston",
"Cullman",
"Blount",
"Etowah",
"Cherokee",
"Fayette",
"Walker",
"Jefferson",
"Saint Clair",
"Pickens",
"Tuscaloosa",
"Shelby"
)
#### No lamar because we do not have the data
County <- toupper(County)
Drug <- c("Oxycodone", "Hydrocodone", "Buprenorphine", "Methadone")
Drug <- toupper(Drug)
tmpdrug <- ARCOS[which((substr(ARCOS$date, 1, 4) %in% c("2017", "2018")) &
(ARCOS$county == "JEFFERSON") & (ARCOS$drug == "OXYCODONE")), ]
date <- as.POSIXct(tmpdrug$date)
businessday <- tis::isBusinessDay(date)
holiday <- tis::isHoliday(date)
fo1 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(tmpdrug$mme_percapita), 7, 2)
fo2 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(tmpdrug$mme_percapita), 30.4375, 5)
H1 <- BayesianLASSOMonitoring::getHMatMT(730, 5)
H1 <- H1[, seq(1, 730 - 5, 7)]
H1 <- H1[, -c(colSums(H1) < 7)]
H2 <- BayesianLASSOMonitoring::getHMatGradual(730, 5)
H2 <- H2[, seq(1, 730 - 5, 7)]
H2 <- H2[, -c(colSums(H2) < 7)]
for (i in 1:length(County)) {
tmp <- ER[which((substr(ER$Date, 1, 4) %in% c("2017", "2018")) &
(ER$County == County[i])), ]
tmp$case_percapita <- tmp$case_percapita * 100000
tmpZlb <- tmp$Count
tmpZub <- tmp$Count
tmpZlb[tmp$Count == 0] <- -Inf
tmpZlb[tmp$Count != 0] <- -0.5
tmpZub <- 0.5
tmpZlb <- tmpZlb / tmp$pop * 100000
tmpZub <- tmpZub / tmp$pop * 100000
if (i == 1) {
Y <- tmp$case_percapita
Zlb <- tmpZlb
Zub <- tmpZub
adjZ <- rep(1, length(tmp$Count))
} else {
Y <- cbind(Y, tmp$case_percapita)
Zlb <- cbind(Zlb, tmpZlb)
Zub <- cbind(Zub, tmpZub)
adjZ <- cbind(adjZ, rep(1, length(tmp$Count)))
}
for (j in 1:4) {
tmp <- ARCOS[which((substr(ARCOS$date, 1, 4) %in% c("2017", "2018")) &
(ARCOS$county == County[i]) & (ARCOS$drug == Drug[j])), ]
tmp$mme_percapita <- tmp$mme_percapita * 100000
tmpZlb <- rep(0, length(tmp$mme_percapita))
tmpZub <- tmpZlb
tmpZlb[businessday == 0] <- -Inf
tmpZub[businessday == 0] <- Inf
tmpZlb[(tmp$mme_percapita == 0) & (businessday == 1)] <- -Inf
tmpZub[(tmp$mme_percapita == 0) & (businessday == 1)] <- 0
Zlb <- cbind(Zlb, tmpZlb)
Zub <- cbind(Zub, tmpZub)
tmpadjZ <- rep(0, length(tmp$mme_percapita))
tmpadjZ[businessday == 0] <- 1
tmpadjZ[(tmp$mme_percapita == 0) & (businessday == 1)] <- 1
adjZ <- cbind(adjZ, tmpadjZ)
Y <- cbind(Y, tmp$mme_percapita)
}
}
CountyAL <- usgeogr::adjacent_county_df[which((usgeogr::adjacent_county_df$county_state == "AL") & (usgeogr::adjacent_county_df$neighbor_state == "AL")), ]
CountyAL$county_name <- toupper(substr(CountyAL$county_name, 1, unlist(gregexpr(" County", CountyAL$county_name)) - 1))
CountyAL$county_name[which(CountyAL$county_name == "DEKALB")] <- "DE KALB"
CountyAL$county_name[which(CountyAL$county_name == "ST. CLAIR")] <- "SAINT CLAIR"
CountyAL$neighbor_name <- toupper(substr(CountyAL$neighbor_name, 1, unlist(gregexpr(" County", CountyAL$neighbor_name)) - 1))
CountyAL$neighbor_name[which(CountyAL$neighbor_name == "DEKALB")] <- "DE KALB"
CountyAL$neighbor_name[which(CountyAL$neighbor_name == "ST. CLAIR")] <- "SAINT CLAIR"
k <- 3
j <- 2
tmpcounty <- County[k]
tmptargetcounty <- tmpcounty
for (l in 1:3) {
tmpsel <- which(CountyAL$county_name %in% tmptargetcounty)
tmpneighbor <- CountyAL$neighbor_name[tmpsel]
tmptargetcounty <- unique(c(tmptargetcounty, tmpneighbor))
}
neighborlevel3 <- tmptargetcounty[-which(tmptargetcounty == tmpcounty)]
targetsel <- which(County %in% tmpcounty)
neighborsel <- which(County %in% neighborlevel3)
targetstart <- (targetsel - 1) * 5 + 1
targetend <- (targetsel - 1) * 5 + 5
neighborstart <- (neighborsel - 1) * 5 + 1
neighborend <- (neighborsel - 1) * 5 + 5
kk <- length(neighborstart)
NeighborY <- vector()
for (i in 1:kk) {
ttt <- Y[, (neighborstart[i]:neighborend[i])]
colnames(ttt) <- paste(neighborsel[i], ".", 1:5, sep = "")
NeighborY <- cbind(NeighborY, ttt)
}
TargetY <- as.matrix(Y[, (targetstart:targetend)[j]])
colnames(TargetY) <- paste(targetsel, ".", j, sep = "")
NeighborY1 <- cbind(NeighborY, Y[, (targetstart:targetend)[-j]])
NeighborYY <- vector()
for (r in 1:dim(NeighborY1)[2]) {
tmp <- BayesianLASSOMonitoring::getV(NeighborY1[, r], 5)
colnames(tmp) <- c(paste(colnames(NeighborY1)[r], ".", 1:5, sep = ""))
NeighborYY <- cbind(NeighborYY, tmp)
}
colnames(NeighborYY) <- c(colnames(NeighborYY)[1:(dim(NeighborYY)[2] - 20)], paste(rep(paste(targetsel, ".", (1:5)[-j], '.', sep = ""), each = 5), rep(1:5, 4), sep = ''))
cc <- abs(cor(cbind(TargetY, NeighborYY)))[, 1][-1]
tmpsel <- which(cc >= 0.1)#which(cc >= quantile(cc, 0.8))
tmpXX <- NeighborYY[, tmpsel]
ss <- pracma::sqrtm(var(tmpXX))
mm <- colMeans(tmpXX)
tmpXX <- t(ss$Binv %*% t(tmpXX - mm))
bset <- list(
"method" = "ALASSO",
"mono" = 1,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ[, (targetstart:targetend)[j]],
"Zlb" = Zlb[, (targetstart:targetend)[j]],
"Zub" = Zub[, (targetstart:targetend)[j]],
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 10,
"thin" = 1,
"burnin" = 10,
"leftcensoring" = 1,
"rounding" = 0
)
if (length(tmpsel) > 0) {
XX <- cbind(businessday, fo1, fo2)
} else {
XX <- cbind(tmpXX, businessday, fo1, fo2)
}
tmpmodel <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(TargetY, bset,
X = XX, H = cbind(H1, H2))
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring", "with-transformation")
library(usgeogr)
ER <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ER_opioid_2016_2019_cleaned.csv")
ARCOS <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ARCOS_AL_2016_2019_cleaned.csv")
#ER <- read.csv(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ER_opioid_2016_2019_cleaned.csv")
#ARCOS <- read.csv(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ARCOS_AL_2016_2019_cleaned.csv")
County <- c(
"Lauderdale",
"Limestone",
"Madison",
"Jackson",
"Colbert",
"Franklin",
"Lawrence",
"Morgan",
"Marshall",
"De kalb",
"Marion",
"Winston",
"Cullman",
"Blount",
"Etowah",
"Cherokee",
"Fayette",
"Walker",
"Jefferson",
"Saint Clair",
"Pickens",
"Tuscaloosa",
"Shelby"
)
#### No lamar because we do not have the data
County <- toupper(County)
Drug <- c("Oxycodone", "Hydrocodone", "Buprenorphine", "Methadone")
Drug <- toupper(Drug)
tmpdrug <- ARCOS[which((substr(ARCOS$date, 1, 4) %in% c("2017", "2018")) &
(ARCOS$county == "JEFFERSON") & (ARCOS$drug == "OXYCODONE")), ]
date <- as.POSIXct(tmpdrug$date)
businessday <- tis::isBusinessDay(date)
holiday <- tis::isHoliday(date)
fo1 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(tmpdrug$mme_percapita), 7, 2)
fo2 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(tmpdrug$mme_percapita), 30.4375, 5)
H1 <- BayesianLASSOMonitoring::getHMatMT(730, 5)
H1 <- H1[, seq(1, 730 - 5, 7)]
H1 <- H1[, -c(colSums(H1) < 7)]
H2 <- BayesianLASSOMonitoring::getHMatGradual(730, 5)
H2 <- H2[, seq(1, 730 - 5, 7)]
H2 <- H2[, -c(colSums(H2) < 7)]
for (i in 1:length(County)) {
tmp <- ER[which((substr(ER$Date, 1, 4) %in% c("2017", "2018")) &
(ER$County == County[i])), ]
tmp$case_percapita <- tmp$case_percapita * 100000
tmpZlb <- tmp$Count
tmpZub <- tmp$Count
tmpZlb[tmp$Count == 0] <- -Inf
tmpZlb[tmp$Count != 0] <- -0.5
tmpZub <- 0.5
tmpZlb <- tmpZlb / tmp$pop * 100000
tmpZub <- tmpZub / tmp$pop * 100000
if (i == 1) {
Y <- tmp$case_percapita
Zlb <- tmpZlb
Zub <- tmpZub
adjZ <- rep(1, length(tmp$Count))
} else {
Y <- cbind(Y, tmp$case_percapita)
Zlb <- cbind(Zlb, tmpZlb)
Zub <- cbind(Zub, tmpZub)
adjZ <- cbind(adjZ, rep(1, length(tmp$Count)))
}
for (j in 1:4) {
tmp <- ARCOS[which((substr(ARCOS$date, 1, 4) %in% c("2017", "2018")) &
(ARCOS$county == County[i]) & (ARCOS$drug == Drug[j])), ]
tmp$mme_percapita <- tmp$mme_percapita * 100000
tmpZlb <- rep(0, length(tmp$mme_percapita))
tmpZub <- tmpZlb
tmpZlb[businessday == 0] <- -Inf
tmpZub[businessday == 0] <- Inf
tmpZlb[(tmp$mme_percapita == 0) & (businessday == 1)] <- -Inf
tmpZub[(tmp$mme_percapita == 0) & (businessday == 1)] <- 0
Zlb <- cbind(Zlb, tmpZlb)
Zub <- cbind(Zub, tmpZub)
tmpadjZ <- rep(0, length(tmp$mme_percapita))
tmpadjZ[businessday == 0] <- 1
tmpadjZ[(tmp$mme_percapita == 0) & (businessday == 1)] <- 1
adjZ <- cbind(adjZ, tmpadjZ)
Y <- cbind(Y, tmp$mme_percapita)
}
}
CountyAL <- usgeogr::adjacent_county_df[which((usgeogr::adjacent_county_df$county_state == "AL") & (usgeogr::adjacent_county_df$neighbor_state == "AL")), ]
CountyAL$county_name <- toupper(substr(CountyAL$county_name, 1, unlist(gregexpr(" County", CountyAL$county_name)) - 1))
CountyAL$county_name[which(CountyAL$county_name == "DEKALB")] <- "DE KALB"
CountyAL$county_name[which(CountyAL$county_name == "ST. CLAIR")] <- "SAINT CLAIR"
CountyAL$neighbor_name <- toupper(substr(CountyAL$neighbor_name, 1, unlist(gregexpr(" County", CountyAL$neighbor_name)) - 1))
CountyAL$neighbor_name[which(CountyAL$neighbor_name == "DEKALB")] <- "DE KALB"
CountyAL$neighbor_name[which(CountyAL$neighbor_name == "ST. CLAIR")] <- "SAINT CLAIR"
k <- 3
j <- 2
tmpcounty <- County[k]
tmptargetcounty <- tmpcounty
for (l in 1:3) {
tmpsel <- which(CountyAL$county_name %in% tmptargetcounty)
tmpneighbor <- CountyAL$neighbor_name[tmpsel]
tmptargetcounty <- unique(c(tmptargetcounty, tmpneighbor))
}
neighborlevel3 <- tmptargetcounty[-which(tmptargetcounty == tmpcounty)]
targetsel <- which(County %in% tmpcounty)
neighborsel <- which(County %in% neighborlevel3)
targetstart <- (targetsel - 1) * 5 + 1
targetend <- (targetsel - 1) * 5 + 5
neighborstart <- (neighborsel - 1) * 5 + 1
neighborend <- (neighborsel - 1) * 5 + 5
kk <- length(neighborstart)
NeighborY <- vector()
for (i in 1:kk) {
ttt <- Y[, (neighborstart[i]:neighborend[i])]
colnames(ttt) <- paste(neighborsel[i], ".", 1:5, sep = "")
NeighborY <- cbind(NeighborY, ttt)
}
#j <- 1
j
TargetY <- as.matrix(Y[, (targetstart:targetend)[j]])
colnames(TargetY) <- paste(targetsel, ".", j, sep = "")
NeighborY1 <- cbind(NeighborY, Y[, (targetstart:targetend)[-j]])
NeighborYY <- vector()
for (r in 1:dim(NeighborY1)[2]) {
tmp <- BayesianLASSOMonitoring::getV(NeighborY1[, r], 5)
colnames(tmp) <- c(paste(colnames(NeighborY1)[r], ".", 1:5, sep = ""))
NeighborYY <- cbind(NeighborYY, tmp)
}
colnames(NeighborYY) <- c(colnames(NeighborYY)[1:(dim(NeighborYY)[2] - 20)], paste(rep(paste(targetsel, ".", (1:5)[-j], '.', sep = ""), each = 5), rep(1:5, 4), sep = ''))
cc <- abs(cor(cbind(TargetY, NeighborYY)))[, 1][-1]
tmpsel <- which(cc >= 0.1)#which(cc >= quantile(cc, 0.8))
tmpXX <- NeighborYY[, tmpsel]
ss <- pracma::sqrtm(var(tmpXX))
mm <- colMeans(tmpXX)
tmpXX <- t(ss$Binv %*% t(tmpXX - mm))
bset <- list(
"method" = "ALASSO",
"mono" = 1,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ[, (targetstart:targetend)[j]],
"Zlb" = Zlb[, (targetstart:targetend)[j]],
"Zub" = Zub[, (targetstart:targetend)[j]],
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 10,
"thin" = 1,
"burnin" = 10,
"leftcensoring" = 1,
"rounding" = 0
)
if (length(tmpsel) > 0) {
XX <- cbind(businessday, fo1, fo2)
} else {
XX <- cbind(tmpXX, businessday, fo1, fo2)
}
tmpmodel <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(TargetY, bset,
X = XX, H = cbind(H1, H2))
tmpmodel <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(TargetY, bset,
X = XX, H = cbind(H1, H2))
remove.packages("BayesianLASSOMonitoring")
