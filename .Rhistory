ph2[which(ph2 < 0)] <- 0
RMSE.ph2.arima <- sqrt(mean((Y2 - ph2) ^ 2))
}
out <- c(out, RMSE.ph1.arima, RMSE.ph2.arima)
out
source("~/Library/CloudStorage/Box-Box/2023 Summer/BayesianMonitoring/New folder/simulation2.R")
BayesianLASSOMonitoring::GibbsRFLSMXYJZ
seed <- 12345
load(file = "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
load(file = '/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat')
object <- walker_OXYCODONE_model2
nnsim <- 100
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H1 <- H1[, seq(1, TT1 - q, 7)]
#H1 <- H1[, -c(colSums(H1) < 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 1,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 1000
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 1
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X = X1, H = H1), silent = TRUE)
chart1
bset <- bset1
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X = X1, H = H1), silent = TRUE)
chart1$Phi
chart1$theta
Y1
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding), silent = TRUE)
chart2$grandsig
X
chart2$sig
length(chart2$grandsig)
length(chart2$sig)
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding), silent = TRUE)
Yph1 <- matrix(NA, nrow = length(Y1), ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu1 <- tmpMu1 + X1 %*% (chart1$Beta * chart1$Zeta)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- tmpMu2 + X2 %*% (chart1$Beta* chart1$Zeta)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
Mu1
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps)
tmp
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu1 <- tmpMu1 + X1 %*% (chart1$Beta * chart1$Zeta)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- tmpMu2 + X2 %*% (chart1$Beta* chart1$Zeta)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
Yph1
ph1pestmedian <- rep(NA, length(Y1) - bset$q)
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1)  - bset$q)) {
ph1pestmedian[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pestmedian <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pestmedian[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
ph1pestmedian
ph2pestmedian
ph2pestmedian
ph1pestmedian
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 1000
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 1
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X = X1, H = H1), silent = TRUE)
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding), silent = TRUE)
chart2
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu1 <- tmpMu1 + X1 %*% (chart1$Beta * chart1$Zeta)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- tmpMu2 + X2 %*% (chart1$Beta* chart1$Zeta)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
Yph1
Yph2
ph1pestmedian <- rep(NA, length(Y1) - bset$q)
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1)  - bset$q)) {
ph1pestmedian[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pestmedian <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pestmedian[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
ph1pestmedian
Yph1[1, ]
bset$rounding
bset <-bset1
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding), silent = TRUE)
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu1 <- tmpMu1 + X1 %*% (chart1$Beta * chart1$Zeta)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- tmpMu2 + X2 %*% (chart1$Beta* chart1$Zeta)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
ph1pestmedian <- rep(NA, length(Y1) - bset$q)
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1)  - bset$q)) {
ph1pestmedian[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph1pestmedian
ph2pestmedian <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pestmedian[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 6)
if ((class(chart1)[1] != "try-error") & (class(chart2)[1] != "try-error")) {
q <- dim(chart1$Phi)[1]
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
RMSE.ph1.median <- sqrt(mean((Y1[-c(1:q)] - ph1pestmedian) ^ 2, na.rm = TRUE))
RMSE.ph2.median <- sqrt(mean((Y2 - ph2pestmedian) ^ 2, na.rm = TRUE))
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1,
RMSE.ph2)
}
out <- rep(NA, 6)
if ((class(chart1)[1] != "try-error") & (class(chart2)[1] != "try-error")) {
q <- dim(chart1$Phi)[1]
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
RMSE.ph1.median <- sqrt(mean((Y1[-c(1:q)] - ph1pestmedian) ^ 2, na.rm = TRUE))
RMSE.ph2.median <- sqrt(mean((Y2 - ph2pestmedian) ^ 2, na.rm = TRUE))
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1.median,
RMSE.ph2.median)
}
out
X
chart2$grandsig
chart2$sig
RMSE.ph1.median
RMSE.ph2.median
getChart <- function(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset) {
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, X = X1, H = H1), silent = TRUE)
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, FAP0 = FAP0, side = side,
updateYJ = bset$updateYJ,
leftcensoring = bset$leftcensoring, rounding = bset$rounding), silent = TRUE)
Yph1 <- matrix(NA, nrow = length(Y1) - bset$q, ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu1 <- tmpMu1 + X1 %*% (chart1$Beta * chart1$Zeta)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- tmpMu2 + X2 %*% (chart1$Beta* chart1$Zeta)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
h <- dim(H2)[1]
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
Mu1 <- chart1$mu0[tmpsel] + tmpMu2[, tmpsel]
tmp <- BayesianLASSOMonitoring::simYph2(h, as.matrix(chart1$Y), as.matrix(chart1$Z[, tmpsel]),
as.matrix(chart1$Phi[, tmpsel]), Mu1, chart1$sigma2[tmpsel],
bset$updateYJ, bset$theta, bset$leftcensoring, bset$rounding, bset$eps)
Yph1[, ii] <- tmp[1:(length(chart1$Y) - bset$q)]
Yph2[, ii] <- tmp[(length(chart1$Y)  - bset$q + 1):length(tmp)]
}
}
ph1pestmedian <- rep(NA, length(Y1) - bset$q)
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1)  - bset$q)) {
ph1pestmedian[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pestmedian <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pestmedian[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 6)
if ((class(chart1)[1] != "try-error") & (class(chart2)[1] != "try-error")) {
q <- dim(chart1$Phi)[1]
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
RMSE.ph1.median <- sqrt(mean((Y1[-c(1:q)] - ph1pestmedian) ^ 2, na.rm = TRUE))
RMSE.ph2.median <- sqrt(mean((Y2 - ph2pestmedian) ^ 2, na.rm = TRUE))
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1.median,
RMSE.ph2.median)
}
return(out)
}
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Xf1 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 7, 2)
Xf2 <- BayesianLASSOMonitoring::getXSeasonalityFS(w + TT1 + TT2 + 5000, 30.4375, 5)
tmpdate <- as.Date("2017-01-01") + (-w + 1):(TT1 + TT2 + 5000)
businessday <- tis::isBusinessDay(tmpdate)
holiday <- tis::isHoliday(tmpdate)
Xreg <- cbind(Xf1, Xf2, businessday, holiday)
Xreg1 <- Xreg[1:(TT1 + TT2 + w - 1), ]
Y <- BayesianLASSOMonitoring::rarma(object, xreg = Xreg1, n = TT1 + TT2 + w - 1, h = ceiling(TT1 * tt) + w - 1, delta = delta)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H1 <- H1[, seq(1, TT1 - q, 7)]
#H1 <- H1[, -c(colSums(H1) < 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
XX <- as.matrix(1:(TT1 + TT2 + 5000))
X1 <- as.matrix(XX[1:TT1, ])
X2 <- as.matrix(XX[(TT1 + 1):(TT1 + TT2), ])
X2sim <- as.matrix(XX[(TT1 + 1):(TT1 + 5000), ])
X1 <- cbind(X1, Xreg[1:TT1, ])
X2 <- cbind(X2, Xreg[(TT1 + 1):(TT1 + TT2), ])
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"rounding" = 0,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 1000
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 1
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
out <-  rep(NA, 6 * 6)
out1 <- getChart(Y1,  H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset1)
out2 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset2)
out3 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset3)
out4 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset4)
out5 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset5)
out6 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset6)
out <- c(out1, out2, out3, out4, out5, out6)
cat("Gibbs Done at X:", X, "\n")
tmp <- try(forecast::auto.arima(Y1, xreg = X1), silent = TRUE)
if (class(tmp)[1] != "try-error") {
ph1 <- tmp$fitted
ph1[which(ph1 < 0)] <- 0
RMSE.ph1.arima <- sqrt(mean(((Y1 - ph1)^2)))
ph2 <- forecast::forecast(tmp, h = length(Y2), xreg = X2)$mean
ph2[which(ph2 < 0)] <- 0
RMSE.ph2.arima <- sqrt(mean((Y2 - ph2) ^ 2))
}
out <- c(out, RMSE.ph1.arima, RMSE.ph2.arima)
out
