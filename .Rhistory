"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
seed <- 123
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 100
TT1 <- c(92, 183, 365)
#TT1 <- c(92)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 5
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2, alpha, lambda, pi,
ceiling(TT1 * tt), delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(1, TT1 - q, 14)]
H1 <- H1[, -c(colSums(H1) < 14)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
##############################################
adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <- Y1[i] - 0.5
Zub[i] <- Y1[i] + 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, H = H1)
Y1
length(Y1)
adjZ
length(adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
length(adjZ)
adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <- Y1[i] - 0.5
Zub[i] <- Y1[i] + 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset1, H = H1)
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
Y1[4]
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <-  - 0.5
Zub[i] <- 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
##############################################
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
rtrnorm(1, -1.37, -0.5, 0.5)
rtrnorm(1, -1.37, 1, -0.5, 0.5)
rtrnorm(1, -1.37, sqrt(0.3), -0.5, 0.5)
rtrnorm(1, -1.37, sqrt(0.03), -0.5, 0.5)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
rtrnorm(1, -1.37, 0.1, -0.5, 0.5)
rtrnorm(1, -1.37, 0.01, -0.5, 0.5)
rtrnorm(1, -1.37, 0.3, -0.5, 0.5)
rtrnorm(1, -1.37, 0.2, -0.5, 0.5)
rtrnorm(1, -1.37, 0.2, -0.5, 0.5)
rtrnorm(1, -1.37, 0.2, -0.5, 0.5)
rtrnorm(1, -1.37, 0.15, -0.5, 0.5)
rtrnorm(1, -1.37, 0.15, -0.5, 0.5)
rtrnorm(1, -1.37, 1, -0.5, 0.5)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
qq$Z
qq$Z[1, ]
hist(qq$Z[1, ])
hist(qq$Z[2, ])
hist(qq$Z[3, ])
hist(qq$Z[4, ])
hist(qq$Z[5, ])
hist(qq$Z[6, ])
hist(qq$Z[7, ])
hist(qq$Z[8, ])
qq$theta
qq$eta2
remove.packages("BayesianLASSOMonitoring")
?p.adjust
#' Bayesian LASSO Phase I Monitoring
#'
#' gets a posterior sample using Gibbs sampling for Random Flexible Level Shift Model
#' @param model is model.
#' @param nsim is .
#' @param FAP0 is
#' @param log is model.
#' @param const is .
#' @param sta is
#'
#'
#' @export
Ph1MultipleTesting.GammaNormCUMSUMBC <- function(model, w = 7, FAP0 = 0.05, method = "bonferroni", side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- model$H %*% (model$Tau * model$Gamma)
ss <- apply(TauGamma, 1, sd)
cs <- rowMeans(TauGamma) / ss
cs[which(is.na(cs) & (ss == 0))] <- 0
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- sig#model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig[tmpsig < 0] <- 0
tmpsig <- diff(tmpsig)
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
Ph1MultipleTesting.GammaNormCUMSUMBC <- function(model, w = 7, FAP0 = 0.05, method = "BY", side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- model$H %*% (model$Tau * model$Gamma)
ss <- apply(TauGamma, 1, sd)
cs <- rowMeans(TauGamma) / ss
cs[which(is.na(cs) & (ss == 0))] <- 0
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- sig#model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig[tmpsig < 0] <- 0
tmpsig <- diff(tmpsig)
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.alpha" = adj.alpha)
}
Ph1MultipleTesting.GammaNormCUMSUMBC <- function(model, w = 7, FAP0 = 0.05, method = "BY", side = "right-sided") {
n <- length(model$Y)
q <- dim(model$Phi)[2]
grand.sig <- 0
sig <- 0
pvalue <- NULL
lim <- NULL
if (!is.null(model$H)) {
m <- dim(model$H)[2]
sig <- rep(0, m)
pvalue <- rep(NA, m)
lim <- cbind(rep(-Inf, m), rep(Inf, m))
TauGamma <- model$H %*% (model$Tau * model$Gamma)
ss <- apply(TauGamma, 1, sd)
cs <- rowMeans(TauGamma) / ss
cs[which(is.na(cs) & (ss == 0))] <- 0
#adj.alpha <- FAP0 / m #BC
#adj.alpha <- 1 - (1 - FAP0) ^ (1 / m) #sidak
if (side == "right-sided") {
pvalue <- 1 - pnorm(cs)
} else if (side == "left-sided") {
pvalue <- pnorm(cs)
} else {
pvalue1 <- 1 - pnorm(cs)
pvalue2 <- pnorm(cs)
pvalue <- cbind(pvalue1, pvalue2)
pvalue <- apply(pvalue, 1, min)
pvalue <- pvalue * 2
}
#sig <- pvalue <= adj.alpha
#grand.sig <- sum(sig) > 0
}
adj.alpha <- p.adjust(pvalue, method)
sig <- adj.alpha <= FAP0
grand.sig <- sum(sig) > 0
tmpsig <- sig#model$H %*% sig
tmpsig[tmpsig > 1] <- 1
tmpsig[tmpsig < 0] <- 0
tmpsig <- diff(tmpsig)
tmpsig <- c(0, tmpsig)
tmpsel <- which(tmpsig == 1)
nsel <- length(tmpsel)
if (nsel > 0) {
for (i in 1:nsel) {
tmpsig[tmpsel[i]:(tmpsel[i] + w - 1)] <- 1
}
}
list("grandsig" = grand.sig, "cs" = cs,
"sig" = tmpsig,
"parsig" = sig,
"pvalue" = pvalue, "adj.pvalue" = adj.alpha)
}
load(file = 'C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_OXYCODONE_modelB2.Rdat')
aa1 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "BY", side = "right-sided")
aa1
aa1 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "holm", side = "right-sided")
aa2 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "hommel", side = "right-sided")
aa3 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "BY", side = "right-sided")
aa1
aa2
aa3
load(file = 'C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_BUPRENORPHINE_modelB2.Rdat')
aa1 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "holm", side = "right-sided")
aa2 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "hommel", side = "right-sided")
aa3 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "BY", side = "right-sided")
aa1
aa2
aa3
plot(aa1$adj.pvalue)
plot(aa2$adj.pvalue)
plot(aa3$adj.pvalue)
load(file = 'C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_ER_modelB2.Rdat')
aa1 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "holm", side = "right-sided")
aa2 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "hommel", side = "right-sided")
aa3 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "BY", side = "right-sided")
aa1
aa2
aa3
load(file = 'C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_BUPRENORPHINE_modelB2.Rdat')
aa1 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "holm", side = "right-sided")
aa2 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "hommel", side = "right-sided")
aa3 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "BY", side = "right-sided")
aa1
debug(Ph1MultipleTesting.GammaNormCUMSUMBC)
aa1 <- Ph1MultipleTesting.GammaNormCUMSUMBC(modelB2, w = 7, FAP0 = 0.05, method = "holm", side = "right-sided")
plot(cs)
hist(TauGamma[1, ])
hist(TauGamma[100, ])
hist(TauGamma[300, ])
hist(TauGamma[400, ])
hist(TauGamma[500, ])
hist(TauGamma[600, ])
hist(TauGamma[700, ])
hist(TauGamma[800, ])
hist(TauGamma[800, ])
Rcpp::compileAttributes()
roxygen2::roxygenize()
roxygen2::roxygenize()
