"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
bset <- bset1
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, H = H1), silent = TRUE)
X
X
bset
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, H = H1), silent = TRUE)
pars[2, ]
pars[3, ]
X <- 3
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
adjZ = rep(1, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <- Y1[i] - 0.5
Zub[i] <- Y1[i] + 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
adjZ
length(adjZ)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <- Y1[i] - 0.5
Zub[i] <- Y1[i] + 0.5
}
}
Zlb
cat("start at X:", X, "\n")
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <- Y1[i] - 0.5
Zub[i] <- Y1[i] + 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
Zlb
Zub
bset <- bset1
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, H = H1), silent = TRUE)
dim(H1)
Zlb
cbind(Zlb, Zub)
adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <- Y1[i] - 0.5
Zub[i] <- Y1[i] + 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
seed <- 123
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 100
TT1 <- c(92, 183, 365)
#TT1 <- c(92)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 5
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2, alpha, lambda, pi,
ceiling(TT1 * tt), delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H1 <- H1[, seq(1, TT1 - q, 14)]
H1 <- H1[, -c(colSums(H1) < 14)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
##############################################
adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <- Y1[i] - 0.5
Zub[i] <- Y1[i] + 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
##############################################
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset, H = H1)
Y1
length(Y1)
adjZ
length(adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
length(adjZ)
adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <- Y1[i] - 0.5
Zub[i] <- Y1[i] + 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
bb <- BayesianLASSOMonitoring::GibbsRFLSMXYJZ(as.matrix(Y1), bset1, H = H1)
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
Y1[4]
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
adjZ <- rep(1, TT1)
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
for (i in 1:TT1) {
if (Y1[i] == 0) {
Zlb[i] <- -Inf
Zub[i] <- 0.5
} else {
Zlb[i] <-  - 0.5
Zub[i] <- 0.5
}
}
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"eta2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 0,
"rounding" = 0
)
##############################################
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
rtrnorm(1, -1.37, -0.5, 0.5)
rtrnorm(1, -1.37, 1, -0.5, 0.5)
rtrnorm(1, -1.37, sqrt(0.3), -0.5, 0.5)
rtrnorm(1, -1.37, sqrt(0.03), -0.5, 0.5)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
rtrnorm(1, -1.37, 0.1, -0.5, 0.5)
rtrnorm(1, -1.37, 0.01, -0.5, 0.5)
rtrnorm(1, -1.37, 0.3, -0.5, 0.5)
rtrnorm(1, -1.37, 0.2, -0.5, 0.5)
rtrnorm(1, -1.37, 0.2, -0.5, 0.5)
rtrnorm(1, -1.37, 0.2, -0.5, 0.5)
rtrnorm(1, -1.37, 0.15, -0.5, 0.5)
rtrnorm(1, -1.37, 0.15, -0.5, 0.5)
rtrnorm(1, -1.37, 1, -0.5, 0.5)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
qq <- GibbsRFLSMXYJZcpp(as.matrix(Y1), 5,
bset1$A, bset1$a, bset1$b, bset1$alpha, bset1$beta,
bset1$theta1, bset1$theta2, bset1$xi2,
bset1$method, bset1$mono, bset1$bound0, bset1$boundqplus1,
bset1$updateYJ, bset1$theta,
bset1$eps,
bset1$adjZ, bset1$Zlb, bset1$Zub, bset1$eta2,
1000, 10, 300,
1e-32, NULL, NULL,X1, H1)
qq$Z
qq$Z[1, ]
hist(qq$Z[1, ])
hist(qq$Z[2, ])
hist(qq$Z[3, ])
hist(qq$Z[4, ])
hist(qq$Z[5, ])
hist(qq$Z[6, ])
hist(qq$Z[7, ])
hist(qq$Z[8, ])
qq$theta
qq$eta2
remove.packages("BayesianLASSOMonitoring")
