delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- rblasso(TT1 + TT2, ceiling(TT1 * tt), delta, object, leftcensoring = 1, rounding = 0, nsim = 1000)
Y1 <- Y[1:(TT1)]
Y2 <- Y[(TT1 + 1):(TT1 + TT2)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
businessday <- object$X[, which(colnames(object$X) == "businessday")]
nonbusinessday <- 1 - businessday
nonbusinessday <- nonbusinessday[1:TT1]
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
adjZ <- ((nonbusinessday[1:TT1] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 1,
"rounding" = 0
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
X1 <- object$X[1:TT1, ]
X2 <- object$X[(TT1 + 1):(TT1 + TT2), ]
out <-  rep(NA, 6 * 14)
out1 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset1, w), silent = TRUE)
if (class(out1)[1] == "try-error") {
out1 <- rep(NA, 14)
}
out2 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset2, w), silent = TRUE)
if (class(out2)[1] == "try-error") {
out2 <- rep(NA, 14)
}
out3 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset3, w), silent = TRUE)
if (class(out3)[1] == "try-error") {
out3 <- rep(NA, 14)
}
out4 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset4, w), silent = TRUE)
if (class(out4)[1] == "try-error") {
out4 <- rep(NA, 14)
}
out5 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset5, w), silent = TRUE)
if (class(out5)[1] == "try-error") {
out5 <- rep(NA, 14)
}
out6 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset6, w), silent = TRUE)
if (class(out6)[1] == "try-error") {
out6 <- rep(NA, 14)
}
out <- c(out1, out2, out3, out4, out5, out6)
cat("Gibbs Done at X:", X, "\n")
###############################################
#RSP
###############################################
rr <- dfphase1::rsp(Y1, FALSE, alpha = FAP0, lmin = w)
rr1 <- rr$p[1] <= FAP0
rr2 <- rr$p[2] <= FAP0
rr3 <- (rr1 + rr2) > 0
out <- c(out, rr1, rr2, rr3)
tmp <- try(forecast::auto.arima(Y1, method = "CSS"), silent = TRUE)
if (class(tmp)[1] != "try-error") {
ph1 <- tmp$fitted
ph1[which(ph1 < 0)] <- 0
RMSE.ph1.arima <- sqrt(mean(((Y1 - ph1)^2)))
ph2 <- forecast::forecast(tmp, h = length(Y2))$mean
ph2[which(ph2 < 0)] <- 0
RMSE.ph2.arima <- sqrt(mean((Y2 - ph2) ^ 2))
}
out <- c(out, RMSE.ph1.arima, RMSE.ph2.arima)
pars
X <- 81
load(file = 'C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_BUPRENORPHINE_modelB2.Rdat')
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- rblasso(TT1 + TT2, ceiling(TT1 * tt), delta, object, leftcensoring = 1, rounding = 0, nsim = 1000)
Y1 <- Y[1:(TT1)]
Y2 <- Y[(TT1 + 1):(TT1 + TT2)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
if (w > 1) {
H1 <- H1[, seq(1, TT1 - q, w)]
H1 <- H1[, -c(colSums(H1) < w)]
}
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
businessday <- object$X[, which(colnames(object$X) == "businessday")]
nonbusinessday <- 1 - businessday
nonbusinessday <- nonbusinessday[1:TT1]
Zlb <- rep(0, TT1)
Zub <- rep(0, TT1)
adjZ <- ((nonbusinessday[1:TT1] == 1) + (Y1 == 0)) == 2
adjZ <- as.numeric(adjZ)
Zlb[adjZ == 1] <- 0
Zub[adjZ == 1] <- Inf
bset1 <- list(
"method" = "MT",
"mono" = 0,
"q" = 5,
"A" = diag(rep(1, 5), nrow = 5),
"bound0" = Inf,
"boundqplus1" = 0,
"xi2" = 0.1,
"theta1" = 1,
"theta2" = 1,
"a" = 1,
"b" = 1,
"alpha" = 1,
"beta" = 1,
"updateYJ" = 1,
"adjZ" = adjZ,
"Zlb" = Zlb,
"Zub" = Zub,
"omega2" = 0.03,
"lambda2" = NULL,
"theta" = 1,
"eps" = 1e-32,
"nsim" = 300,
"thin" = 10,
"burnin" = 2000,
"leftcensoring" = 1,
"rounding" = 0
)
bset2 <- bset1
bset2$method <- "regression"
bset2$mono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$mono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$mono <- 0
bset5 <- bset1
bset5$method <- "LASSO"
bset5$mono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$mono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
X1 <- object$X[1:TT1, ]
X2 <- object$X[(TT1 + 1):(TT1 + TT2), ]
out <-  rep(NA, 6 * 14)
out1 <- try(getChart(Y1, H1, NULL,
side, FAP0,
Y2, H2, tt, TT1, X1, X2, bset1, w), silent = TRUE)
rarma <- function(object, n, h, delta, xreg = NULL, nsim = 100, burnin = 50, lowerbound = 0) {
##order <- c(0, 0, 0)
##
##nar <- sum(object$model$phi != 0)
##nma <- sum(object$model$theta != 0)
##
##if (nar > 0) {
##  order[1] <- nar
##  phi.vec <- object$model$phi[which(object$model$phi != 0)]
##} else {
##  phi.vec <- NULL
##}
##
##if (nma > 0) {
##  order[3] <- nma
##  theta.vec <- object$model$theta[which(object$model$theta != 0)]
##} else {
##  theta.vec <- NULL
##}
##
##ss <- sigma.mat(100, order = order, phi.vec = phi.vec, theta.vec = theta.vec, sigma2 = object$sigma2,
##                burn.in = burnin)
sim <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:nsim) {
sim[, i] <- simulate(object, nsim = n, future = FALSE, xreg = xreg)
}
fi <- rowMeans(sim)
va <- mean(colMeans((sim - fi) ^ 2))
mu <- rep(0, n)
mu[h:n] <- mu[h:n] + sqrt(va) * delta
#ts <- simulate(object, nsim = n, future = FALSE, xreg = xreg)
tmpsel <- sample(1:100, 1)
ts <- sim[, tmpsel] + mu
#innov <- rnorm(n, mu, sqrt(object$sigma2))
#ts <- simulate(object, nsim = n, future = FALSE, innov = innov, xreg = xreg)
ts[which(ts < lowerbound)] <- lowerbound
ts
}
#dat <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ARCOS_AL_2016_2019_cleaned.csv")
#addr <- "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/"
#addr <- "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/"
addr <- "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/"
dataddr <- paste(addr, "ARCOS_AL_2016_2019_cleaned.csv", sep= '')
methadoneaddr <- paste(addr, "walker_METHADONE_model2.Rdat", sep = '')
buprenorphineaddr <- paste(addr, "walker_BUPRENORPHINE_model2.Rdat", sep = '')
oxycodoneaddr <- paste(addr, "walker_OXYCODONE_model2.Rdat", sep = '')
hydrocodoneaddr <- paste(addr, "walker_HYDROCODONE_model2.Rdat", sep = '')
dat <- read.csv(file = dataddr)
################################################
METHADONE <- dat[which((substr(dat$date, 1, 4) %in% c("2017", "2018")) &
(dat$county == "WALKER") & (dat$drug == "METHADONE")), ]
date <- as.POSIXct(METHADONE$date)
businessday <- tis::isBusinessDay(date)
holiday <- tis::isHoliday(date)
fo1 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(METHADONE$mme_percapita), 7, 2)
fo2 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(METHADONE$mme_percapita), 30.4375, 5)
walker_METHADONE_model1 <- forecast::auto.arima(METHADONE$mme_percapita + 0.5)
walker_METHADONE_model2 <- forecast::auto.arima(METHADONE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday, holiday))
walker_METHADONE_model3 <- forecast::auto.arima(METHADONE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday, holiday),
lambda = forecast::BoxCox.lambda(METHADONE$mme_percapita + 0.5), biasadj = TRUE)
plot(METHADONE$mme_percapita, type = 'l')
points(walker_METHADONE_model1$fitted - 0.5, col = 'red', type = 'l')
points(walker_METHADONE_model2$fitted - 0.5, col = 'blue', type = 'l')
points(walker_METHADONE_model3$fitted - 0.5, col = 'green', type = 'l')
rarma <- function(object, n, h, delta, xreg = NULL, nsim = 100, burnin = 50, lowerbound = 0, const = 0.5) {
##order <- c(0, 0, 0)
##
##nar <- sum(object$model$phi != 0)
##nma <- sum(object$model$theta != 0)
##
##if (nar > 0) {
##  order[1] <- nar
##  phi.vec <- object$model$phi[which(object$model$phi != 0)]
##} else {
##  phi.vec <- NULL
##}
##
##if (nma > 0) {
##  order[3] <- nma
##  theta.vec <- object$model$theta[which(object$model$theta != 0)]
##} else {
##  theta.vec <- NULL
##}
##
##ss <- sigma.mat(100, order = order, phi.vec = phi.vec, theta.vec = theta.vec, sigma2 = object$sigma2,
##                burn.in = burnin)
sim <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:nsim) {
sim[, i] <- simulate(object, nsim = n, future = FALSE, xreg = xreg)
}
fi <- rowMeans(sim)
va <- mean(colMeans((sim - fi) ^ 2))
mu <- rep(0, n)
mu[h:n] <- mu[h:n] + sqrt(va) * delta
#ts <- simulate(object, nsim = n, future = FALSE, xreg = xreg)
tmpsel <- sample(1:100, 1)
ts <- sim[, tmpsel] - const + mu
#innov <- rnorm(n, mu, sqrt(object$sigma2))
#ts <- simulate(object, nsim = n, future = FALSE, innov = innov, xreg = xreg)
ts[which(ts < lowerbound)] <- lowerbound
ts
}
rarma(walker_METHADONE_model3, 100, 1)
rarma(walker_METHADONE_model3, 100, 50, xreg = cbind(fo1, fo2, businessday, holiday))
rarma(walker_METHADONE_model3, 100, 50, xreg = cbind(fo1, fo2, businessday, holiday)[1:100])
rarma(walker_METHADONE_model3, 100, 50, xreg = cbind(fo1, fo2, businessday, holiday)[1:100, ])
rarma(walker_METHADONE_model3, 100, 50, xreg = cbind(fo1, fo2, businessday, holiday)[1:100, ], delta = 10)
debug(rarma)
rarma(walker_METHADONE_model3, 100, 50, xreg = cbind(fo1, fo2, businessday, holiday)[1:100, ], delta = 10)
sim
fi
sim[, 1] - fi
sim[, 1:2] - fi
sim[, 1] - fi
sim[, 1:2] - fi
delta
sqrt(va) * delta
ts
ts
debug(rarma)
rarma(walker_METHADONE_model3, 100, 50, xreg = cbind(fo1, fo2, businessday, holiday)[1:100, ], delta = 10)
object$fitted
fi
object$fitted[1:100]
fi
rarma <- function(object, n, h, delta, xreg = NULL, nsim = 1000, burnin = 50, lowerbound = 0, const = 0.5) {
##order <- c(0, 0, 0)
##
##nar <- sum(object$model$phi != 0)
##nma <- sum(object$model$theta != 0)
##
##if (nar > 0) {
##  order[1] <- nar
##  phi.vec <- object$model$phi[which(object$model$phi != 0)]
##} else {
##  phi.vec <- NULL
##}
##
##if (nma > 0) {
##  order[3] <- nma
##  theta.vec <- object$model$theta[which(object$model$theta != 0)]
##} else {
##  theta.vec <- NULL
##}
##
##ss <- sigma.mat(100, order = order, phi.vec = phi.vec, theta.vec = theta.vec, sigma2 = object$sigma2,
##                burn.in = burnin)
sim <- matrix(NA, nrow = n, ncol = nsim)
for (i in 1:nsim) {
sim[, i] <- simulate(object, nsim = n, future = FALSE, xreg = xreg)
}
fi <- rowMeans(sim)
va <- mean(colMeans((sim - fi) ^ 2))
mu <- rep(0, n)
mu[h:n] <- mu[h:n] + sqrt(va) * delta
#ts <- simulate(object, nsim = n, future = FALSE, xreg = xreg)
tmpsel <- sample(1:nsim, 1)
ts <- sim[, tmpsel] - const + mu
#innov <- rnorm(n, mu, sqrt(object$sigma2))
#ts <- simulate(object, nsim = n, future = FALSE, innov = innov, xreg = xreg)
ts[which(ts < lowerbound)] <- lowerbound
ts
}
debug(rarma)
rarma(walker_METHADONE_model3, 100, 50, xreg = cbind(fo1, fo2, businessday, holiday)[1:100, ], delta = 10)
fi
object$fitted
object$fitted[1:100]
fi
#dat <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/ARCOS_AL_2016_2019_cleaned.csv")
#addr <- "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/"
#addr <- "C:/Users/bolus/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/"
addr <- "/Users/yuihuiyao/Library/CloudStorage/Box-Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/"
dataddr <- paste(addr, "ARCOS_AL_2016_2019_cleaned.csv", sep= '')
methadoneaddr <- paste(addr, "walker_METHADONE_model3.Rdat", sep = '')
buprenorphineaddr <- paste(addr, "walker_BUPRENORPHINE_model3.Rdat", sep = '')
oxycodoneaddr <- paste(addr, "walker_OXYCODONE_model3.Rdat", sep = '')
hydrocodoneaddr <- paste(addr, "walker_HYDROCODONE_model3.Rdat", sep = '')
dat <- read.csv(file = dataddr)
################################################
METHADONE <- dat[which((substr(dat$date, 1, 4) %in% c("2017", "2018")) &
(dat$county == "WALKER") & (dat$drug == "METHADONE")), ]
date <- as.POSIXct(METHADONE$date)
businessday <- tis::isBusinessDay(date)
holiday <- tis::isHoliday(date)
fo1 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(METHADONE$mme_percapita), 7, 2)
fo2 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(METHADONE$mme_percapita), 30.4375, 5)
walker_METHADONE_model1 <- forecast::auto.arima(METHADONE$mme_percapita + 0.5)
walker_METHADONE_model2 <- forecast::auto.arima(METHADONE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday, holiday))
walker_METHADONE_model3 <- forecast::auto.arima(METHADONE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday, holiday),
lambda = forecast::BoxCox.lambda(METHADONE$mme_percapita + 0.5), biasadj = TRUE)
plot(METHADONE$mme_percapita, type = 'l')
points(walker_METHADONE_model1$fitted - 0.5, col = 'red', type = 'l')
points(walker_METHADONE_model2$fitted - 0.5, col = 'blue', type = 'l')
points(walker_METHADONE_model3$fitted - 0.5, col = 'green', type = 'l')
save(walker_METHADONE_model3,
file = methadoneaddr)
################################################
BUPRENORPHINE <- dat[which((substr(dat$date, 1, 4) %in% c("2017", "2018")) &
(dat$county == "WALKER") & (dat$drug == "BUPRENORPHINE")), ]
date <- as.POSIXct(BUPRENORPHINE$date)
businessday <- tis::isBusinessDay(date)
holiday <- tis::isHoliday(date)
fo1 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(BUPRENORPHINE$mme_percapita), 7, 2)
fo2 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(BUPRENORPHINE$mme_percapita), 30.4375, 5)
walker_BUPRENORPHINE_model1 <- forecast::auto.arima(BUPRENORPHINE$mme_percapita + 0.5)
walker_BUPRENORPHINE_model2 <- forecast::auto.arima(BUPRENORPHINE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday, holiday))
walker_BUPRENORPHINE_model3 <- forecast::auto.arima(BUPRENORPHINE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday, holiday),
lambda = forecast::BoxCox.lambda(BUPRENORPHINE$mme_percapita + 0.5), biasadj = TRUE)
plot(BUPRENORPHINE$mme_percapita, type = 'l')
points(walker_BUPRENORPHINE_model1$fitted - 0.5, col = 'red', type = 'l')
points(walker_BUPRENORPHINE_model2$fitted - 0.5, col = 'blue', type = 'l')
points(walker_BUPRENORPHINE_model3$fitted - 0.5, col = 'green', type = 'l')
save(walker_BUPRENORPHINE_model3,
file = buprenorphineaddr)
################################################
HYDROCODONE <- dat[which((substr(dat$date, 1, 4) %in% c("2017", "2018")) &
(dat$county == "WALKER") & (dat$drug == "HYDROCODONE")), ]
date <- as.POSIXct(HYDROCODONE$date)
businessday <- tis::isBusinessDay(date)
holiday <- tis::isHoliday(date)
walker_HYDROCODONE_model1 <- forecast::auto.arima(HYDROCODONE$mme_percapita + 0.5)
fo1 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(HYDROCODONE$mme_percapita), 7, 2)
fo2 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(HYDROCODONE$mme_percapita), 30.4375, 5)
walker_HYDROCODONE_model2 <- forecast::auto.arima(HYDROCODONE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday,
holiday))
walker_HYDROCODONE_model3 <- forecast::auto.arima(HYDROCODONE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday, holiday),
lambda = forecast::BoxCox.lambda(HYDROCODONE$mme_percapita + 0.5), biasadj = TRUE)
plot(c(1, 729),
c(min(HYDROCODONE$mme_percapita, walker_HYDROCODONE_model1$fitted, walker_HYDROCODONE_model2$fitted),
max(HYDROCODONE$mme_percapita, walker_HYDROCODONE_model1$fitted, walker_HYDROCODONE_model2$fitted)), type = 'n')
points(HYDROCODONE$mme_percapita, type = 'l')
points(walker_HYDROCODONE_model1$fitted - 0.5, col = 'red', type = 'l')
points(walker_HYDROCODONE_model2$fitted - 0.5, col = 'blue', type = 'l')
points(walker_HYDROCODONE_model3$fitted - 0.5, col = 'green', type = 'l')
save(walker_HYDROCODONE_model3,
file = hydrocodoneaddr)
################################################
OXYCODONE <- dat[which((substr(dat$date, 1, 4) %in% c("2017", "2018")) &
(dat$county == "WALKER") & (dat$drug == "OXYCODONE")), ]
date <- as.POSIXct(OXYCODONE$date)
businessday <- tis::isBusinessDay(date)
holiday <- tis::isHoliday(date)
walker_OXYCODONE_model1 <- forecast::auto.arima(OXYCODONE$mme_percapita + 0.5)
fo1 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(OXYCODONE$mme_percapita), 7, 2)
fo2 <- BayesianLASSOMonitoring::getXSeasonalityFS(length(OXYCODONE$mme_percapita), 30.4375, 5)
walker_OXYCODONE_model2 <- forecast::auto.arima(OXYCODONE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday,
holiday))
walker_OXYCODONE_model3 <- forecast::auto.arima(OXYCODONE$mme_percapita + 0.5,
xreg = cbind(fo1, fo2, businessday, holiday),
lambda = forecast::BoxCox.lambda(OXYCODONE$mme_percapita + 0.5), biasadj = TRUE)
plot(c(1, 729),
c(min(OXYCODONE$mme_percapita, walker_OXYCODONE_model1$fitted, walker_OXYCODONE_model2$fitted),
max(OXYCODONE$mme_percapita, walker_OXYCODONE_model1$fitted, walker_OXYCODONE_model2$fitted)), type = 'n')
points(OXYCODONE$mme_percapita, type = 'l')
points(walker_OXYCODONE_model1$fitted - 0.5, col = 'red', type = 'l')
points(walker_OXYCODONE_model2$fitted - 0.5, col = 'blue', type = 'l')
points(walker_OXYCODONE_model3$fitted - 0.5, col = 'green', type = 'l')
save(walker_OXYCODONE_model3,
file = oxycodoneaddr)
walker_OXYCODONE_model3
walker_HYDROCODONE_model3
walker_BUPRENORPHINE_model3
walker_METHADONE_model3
load(file = 'C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/presentation/walker_ER_modelB2.Rdat')
load(file = "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model3.Rdat")
BayesianLASSOMonitoring::rblasso
BayesianLASSOMonitoring::rblasso
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
